<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TechnologySolutions.Rfid.AsciiProtocol.FX35</name>
    </assembly>
    <members>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IParameterValue`1">
            <summary>
            Represents a command line parameter for a command
            </summary>
            <typeparam name="TParameter">The value of the parameter</typeparam>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IParameterValue`1.Value">
            <summary>
            Gets or sets the current value of the parameter
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IParameterAndValue`1">
            <summary>
            Defines a command line parameter for a command with a type specific value
            </summary>
            <typeparam name="TParameter">The type of the parameters value</typeparam>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ICommandParameter">
            <summary>
            Defines a command line parameter for a command
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IParameterAction">
            <summary>
            Defines actions common to all parameters to read from or write to a command line
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IParameterAction.AppendToCommandLine(System.Text.StringBuilder)">
            <summary>
            Appends the parameter to the command line as required
            </summary>
            <param name="line">The builder for the command line</param>
            <remarks>
            Most parameters have a not specified value which if set do not get output to the command line
            </remarks>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IParameterAction.Reset">
            <summary>
            Resets the parameter to its not specified value
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IParameterAction.ParseParameter(System.String)">
            <summary>
            Parse the string to extract the parameter value
            </summary>
            <param name="parameter">The parameter to parse</param>
            <returns>
            True if the parameter is for this instance and the value was parsed successfully. False otherwise
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value is outside the permitted range</exception>
            <exception cref="T:System.FormatException">If the parameter is not in the expected format</exception>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ICommandParameter.ParameterIdentifier">
            <summary>
            Gets the character(s) used to identify the parameter on the command line
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ICommandParameter.ParameterType">
            <summary>
            Gets the type of the <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ICommandParameter.ParameterValue"/>
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ICommandParameter.ParameterValue">
            <summary>
            Gets or sets the current value of the parameter
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.DatabankParameterCollection">
            <summary>
            Implements <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IDatabankParameters"/> and can be used by a command to provide the values with range checking
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterCollection">
            <summary>
            Groups a collection of <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ICommandParameter"/>s into a set to be used as a single <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IParameterAction"/>s 
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterCollection.parameters">
            <summary>
            The parameter collection
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterCollection.#ctor">
            <summary>
            Initializes a new instance of the ParameterCollection class
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterCollection.Add(TechnologySolutions.Rfid.AsciiProtocol.Parameters.ICommandParameter)">
            <summary>
            Adds a parameter to the set
            </summary>
            <param name="value">The parameter to add</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterCollection.AddRange(System.Collections.Generic.IEnumerable{TechnologySolutions.Rfid.AsciiProtocol.Parameters.ICommandParameter})">
            <summary>
            Add parameters to the set
            </summary>
            <param name="values">The parameters to add</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterCollection.AppendToCommandLine(System.Text.StringBuilder)">
            <summary>
            Appends the parameters to the command line as required
            </summary>
            <param name="line">The builder for the command line</param>
            <remarks>
            Most parameters have a not specified value which if set do not get output to the command line
            </remarks>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterCollection.ParseParameter(System.String)">
            <summary>
            Returns true if parameter is successfully parsed as a parameter value
            </summary>
            <param name="parameter">The parameter to parse</param>
            <returns>True if a parameter was matched and parsed successfully. False otherwise</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value is outside the permitted range</exception>
            <exception cref="T:System.FormatException">If the parameter is not in the expected format</exception>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterCollection.Remove(System.String)">
            <summary>
            Removes a parameter from the set
            </summary>
            <param name="parameterIdentifier">
            The character(s) used to identify the required parameter on the command line
            </param>
            <returns>True if the parameter was removed</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterCollection.Reset">
            <summary>
            Resets the parameters to their reset values
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator to iterate through the parameters
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator to iterate through the parameters
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ICommandParameter"/> with the specicifed identifier
            </summary>
            <param name="parameterIdentifier">The character(s) used to identify the required parameter on the command line</param>
            <returns>The requested parameter</returns>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IDatabankParameters">
            <summary>
            Parameters related to Data Banks in commands and responses
            </summary>
            <seealso cref="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.DatabankParameterCollection"/>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IDatabankParameters.Bank">
            <summary>
            Gets or sets the transponder data bank to be used
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IDatabankParameters.Length">
            <summary>
            Gets or sets the length in words of the data to write
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IDatabankParameters.Offset">
            <summary>
            Gets or sets the offset, in 16 bit words, from the start of the memory bank to where the data will be written
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Parameters.DatabankParameterCollection.bank">
            <summary>
            Backing field for Bank
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Parameters.DatabankParameterCollection.length">
            <summary>
            Backing field for Length
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Parameters.DatabankParameterCollection.offset">
            <summary>
            Backing field for Offset
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.DatabankParameterCollection.#ctor">
            <summary>
            Initializes a new instance of the DatabankParameterCollection class
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.DatabankParameterCollection.Bank">
            <summary>
            Gets or sets the transponder data bank to be used
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.DatabankParameterCollection.Length">
            <summary>
            Gets or sets the length in words of the data to write
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.DatabankParameterCollection.Offset">
            <summary>
            Gets or sets the offset, in 16 bit words, from the start of the memory bank to where the data will be written
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterInt">
            <summary>
            Defines a parameter that is an optional integar
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterBase`1">
            <summary>
            Base class for parameters
            </summary>
            <typeparam name="TParameter">The value type for the parameter</typeparam>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterBase`1.log">
            <summary>
            Provides logging for this class
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterBase`1.value">
            <summary>
            The current value of the parameter
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterBase`1.parameterFormat">
            <summary>
            Backing field for <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterBase`1.ParameterFormat"/>
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterBase`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the ParameterBase class
            </summary>
            <param name="identifier">The character(s) that identify the parameter on the command line</param>
            <param name="notSpecifiedValue">The value for the parameter when it should not be output to the command line</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterBase`1.AppendToCommandLine(System.Text.StringBuilder)">
            <summary>
            Appends the parameter to the command line if the current value is not <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterBase`1.NotSpecifiedValue"/>
            </summary>
            <param name="line">The builder for the command line</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterBase`1.Reset">
            <summary>
            Resets the parameter to not specified
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterBase`1.ParseParameter(System.String)">
            <summary>
            Parse the string to extract the parameter value
            </summary>
            <param name="parameter">The parameter to parse</param>
            <returns>
            True if the parameter is for this instance and the value was parsed successfully. False otherwise
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value is outside the permitted range</exception>
            <exception cref="T:System.FormatException">If the parameter is not in the expected format</exception>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterBase`1.ParseValue(System.String)">
            <summary>
            Attempt to parse the value from the command line and assign value to the parsed value
            </summary>
            <param name="value">The value to parse</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value is outside the permitted range</exception>
            <exception cref="T:System.FormatException">If the parameter is not in the expected format</exception>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterBase`1.CheckValue(`0)">
            <summary>
            When overridden in derived classes should check that the value is appropriate. Called when the <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterBase`1.Value"/>
            property is assigned.
            </summary>
            <param name="value">The new value</param>
            <returns>The value to assign to the property</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value is out of range or accepted values</exception>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterBase`1.ParameterFailMessage(System.String,System.String)">
            <summary>
            Returns a human readable error message to display to the user
            </summary>
            <param name="reason">The error message thrown when the parameter is parsed</param>
            <param name="parameterValue">The value that throw an exception</param>
            <returns>The error message</returns>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterBase`1.NotSpecifiedValue">
            <summary>
            Gets the value that represnts the NotSpecified value. 
            i.e. When equal to this value the parameter does not get sent to the reader
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterBase`1.ParameterIdentifier">
            <summary>
            Gets the character(s) that identify this parameter on the command line (e.g. "qs" for "-qs" query select)
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterBase`1.ParameterFormat">
            <summary>
            Gets or sets the format string to write this parameter to the command line. 
            By default this is " -{0}{1}" to insert the swtich followed by <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterBase`1.ParameterIdentifier"/> then <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterBase`1.Value"/>
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterBase`1.Value">
            <summary>
            Gets or sets the current value of the parameter
            </summary>
            <remarks>
            Override <see cref="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterBase`1.CheckValue(`0)"/> and throw an ArgumentOutOrRangeException to ensure it is set to a correct value
            </remarks>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterBase`1.ParameterType">
            <summary>
            Gets the type of the <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterBase`1.ParameterValue"/>
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterBase`1.ParameterValue">
            <summary>
            Gets or sets the current value of the parameter
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterInt.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the ParameterInt class for decimal values
            </summary>
            <param name="identifier">The character(s) that identify the parameter on the command line</param>
            <param name="minimum">The maximum permitted value when not null</param>
            <param name="maximum">The minimum permitted value when not null</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterInt.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ParameterInt class
            </summary>
            <param name="identifier">The character(s) that identify the parameter on the command line</param>
            <param name="parseFormat">
            A format string to output the value to the command line. This also indicates whether the value should
            be parsed as hex (e.g. "X2" or decimal "D")
            </param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterInt.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the ParameterInt class
            </summary>
            <param name="identifier">The character(s) that identify the parameter on the command line</param>
            <param name="minimum">The maximum permitted value when not null</param>
            <param name="maximum">The minimum permitted value when not null</param>
            <param name="parseFormat">
            A format string to output the value to the command line. This also indicates whether the value should
            be parsed as hex ("X" or decimal "D")
            </param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterInt.CheckValue(System.Nullable{System.Int32})">
            <summary>
            Checks that value is within the accepted range if the value is not null
            </summary>
            <param name="value">The value to check</param>
            <returns>The checked value</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterInt.ParseValue(System.String)">
            <summary>
            Attempt to parse the value from the command line and assign value to the parsed value
            </summary>
            <param name="value">The value to parse</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value is outside the permitted range</exception>
            <exception cref="T:System.FormatException">If the parameter is not in the expected format</exception>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterInt.MaximumOf(System.String)">
            <summary>
            Returns the maximum value permitted for a hex value based on the parse format
            </summary>
            <param name="parseFormat">The parse format for the value</param>
            <returns>The maximum value for the int based on the parse format</returns>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterInt.Maximum">
            <summary>
            Gets the maximum permitted value
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterInt.Minimum">
            <summary>
            Gets the minimum permitted value
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.EnumExtensionAttribute">
            <summary>
            An attribute to extend an Enum value to have a parameter and description
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.EnumExtensionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the EnumExtensionAttribute class
            </summary>
            <param name="parameter">The parameter equivalent for the value</param>
            <param name="description">The description of the value</param>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.EnumExtensionAttribute.Parameter">
            <summary>
            Gets the parameter for the value
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.EnumExtensionAttribute.Description">
            <summary>
            Gets the description for the value
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.SelectAction">
            <summary>
            Specifies the action to perform on an inventoried transponder in <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ISelectParameters"/>
            </summary>
            <remarks>
            select( TSL_SelectTarget_NotSpecified = 0,  @"",       @"Not specified"     )\
            select( TSL_SelectTarget_S0,                @"s0",     @"Session 0"         )\
            select( TSL_SelectTarget_S1,                @"s1",     @"Session 1"         )\
            select( TSL_SelectTarget_S2,                @"s2",     @"Session 2"         )\
            select( TSL_SelectTarget_S3,                @"s3",     @"Session 3"         )\
            select( TSL_SelectTarget_SL,                @"sl",     @"Select"            )
            </remarks>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.SelectAction.AssertSetANotDeassertSetB">
            <summary>
            Match: Assert Select / Set Session A  Non Match: Deassert Select / Set Session B
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.SelectAction.AssertSetANotNothingNothing">
            <summary>
            Match: Assert Select / Set Session A  Non Match: Nothing / Nothing
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.SelectAction.NothingNothingNotDeassertSetB">
            <summary>
            Match: Nothing / Nothing  Non Match: Deassert Select / Set Session B
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.SelectAction.ToggleToggleNotNothingNothing">
            <summary>
            Match: Toggle / Toggle  Non Match: Nothing / Nothing
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.SelectAction.DeassertSetBNotAssertSetA">
            <summary>
            Match: Deassert Select / Set Session B  Non Match: Assert Select / Set Session A
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.SelectAction.DeassertSetBNotNothingNothing">
            <summary>
            Match: Deassert Select / Set Session B  Non Match: Nothing / Nothing
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.SelectAction.NothingNothingNotAssertSetA">
            <summary>
            Match: Nothing / Nothing  Non Match: Assert Select / Set Session A
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.SelectAction.NothingNothingNotToggleToggle">
            <summary>
            Match: Nothing / Nothing  Non Match: Toggle / Toggle
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.QueryTarget">
            <summary>
            Specifies the query target in <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IQueryParameters"/>
            </summary>
            <remarks>
            select( TSL_QueryTarget_NotSpecified = 0,  @"",      @"Not specified"     )\
            select( TSL_QueryTarget_A,                 @"a",     @"A"         )\
            select( TSL_QueryTarget_B,                 @"b",     @"B"         )
            </remarks>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.QueryTarget.TargetA">
            <summary>
            Select target A
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.QueryTarget.TargetB">
            <summary>
            Select target B
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IAntennaParameters">
            <summary>
            Parameters related to the reader Antenna operation during commands
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IAntennaParameters.OutputPower">
            <summary>
            Gets or sets the output power. Valid power range is 10 - 29.
            Use null (Nothing in Visual Basic) to read the output power.
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.BuzzerTone">
            <summary>
            Provides values for the <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.AlertCommand.BuzzerTone"/> value
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.BuzzerTone.Low">
            <summary>
            a low tone has been specified and is sent as 'low'_
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.BuzzerTone.Medium">
            <summary>
            a medium tone has been specified and is sent as 'med'
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.BuzzerTone.High">
            <summary>
            a high tone has been specified and is sent as 'hig'
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.ReadTransponderCommand">
            <summary>
            A command to read data from the memory banks of one or more transponders 
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.TransponderMemoryCommandBase">
            <summary>
            Base class for commands that read or write transponder memory
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.TransponderAccessCommandBase">
            <summary>
            Base class for transponders that perform tag access (require access password -ap)
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.QuerySelectTransponderCommandBase">
            <summary>
            Base class for commands that query and select transponders
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.TranspondersCommandBase">
            <summary>
            Base class for commands that return one or more transponders
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.AlertDateTimeCommandBase">
            <summary>
            Base class for commands that support -n -p -x -al -dt
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.ActionCommandBase">
            <summary>
            Base class for commands that support -n -p -x 
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.ParameterCommandBase">
            <summary>
            Base class for commands that have parameters (i.e. support -p -x)
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.AsciiCommandBase">
            <summary>
            Base class for all ASCII commands
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.AsciiSelfResponderCommandBase">
            <summary>
            Base class for commands that receive their own reponses
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandLibraryResponderBase">
            <summary>
            Base class for library commands
            This is identical to the <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandResponderBase"/> except, by default, it will only
            repond to commands containing the TSL_LibraryCommandId
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandResponderBase">
            <summary>
            Base implmentation of <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommand"/>
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandResponderBase.log">
            <summary>
            Provides logging for this class
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandResponderBase.response">
            <summary>
            The last received response to the command
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandResponderBase.isWithinLogResponse">
            <summary>
            True when the received line is between LB: and LE: headers
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandResponderBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AsciiCommandResponderBase class to respond to a specific command
            </summary>
            <param name="commandName">The command name e.g. '.iv' for Inventory or string.Empty to respond to all commands</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandResponderBase.CommandLine">
            <summary>
            Returns the Ascii command line (including terminators) to be sent to the device
            </summary>
            <returns>The command line to send this command</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandResponderBase.ParseParameters(System.String)">
            <summary>
            Parses a PR: value for parameters and updates the command with the values parsed
            </summary>
            <param name="parameterLine">The line containing parameters to parse</param>
            <returns>The individual parameters from the line</returns>
            TODO: upgrade to handle entire command line
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandResponderBase.ValidateAndParseParameters(System.String)">
            <summary>
            Parses a command line or PR: value and updates the commands parameter to match.
            Returns validation messages for any errors encountered
            </summary>
            <param name="parameterLine">The parameters to parse</param>
            <returns>Any validtion messages arising from parsing the parameter line</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandResponderBase.ValidateAndParseParameters(System.String,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Parses a command line or PR: value and updates the commands parameter to match.
            Returns validation messages for any errors encountered
            </summary>
            <param name="parameterLine">The parameters to parse</param>
            <param name="parameters">output the parameter line split into individual parameters</param>
            <returns>Any validtion messages arising from parsing the parameter line</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandResponderBase.BuildCommandLine(System.Text.StringBuilder)">
            <summary>
            Builds the command line part before the parameters. Appends the <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandResponderBase.CommandName"/> to the command line
            </summary>
            <param name="commandLine">The command line to append to</param>
            <remarks>
            Override this method to replace or append what gets written to the command line before the parameters.
            When this responder is listening for the command start the "CS" value before the parameters must match
            the built command line before the parameters for the command to be started.
            </remarks>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandResponderBase.LastCommandLine">
            <summary>
            Gets or sets the last command line generated by <see cref="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandResponderBase.CommandLine"/>
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandResponderBase.Response">
            <summary>
            Gets the response received to this commmand for the last time it was executed
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandResponderBase.Responder">
            <summary>
            Gets the responder for the command that will populate <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandResponderBase.Response"/>
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandResponderBase.Parameters">
            <summary>
            Gets the parameters supported by this command
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandResponderBase.CommandName">
            <summary>
            Gets the command name of the command (e.g. ".iv")
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandLibraryResponderBase.LibraryCommandIdentifier">
            <summary>
            The value inserted into the command line to identify the command as a library command
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandLibraryResponderBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AsciiCommandLibraryResponderBase class
            </summary>
            <param name="commandName">The command name e.g. '.iv' for Inventory or string.Empty to respond to all commands</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandLibraryResponderBase.BuildCommandLine(System.Text.StringBuilder)">
            <summary>
            Appends <see cref="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandLibraryResponderBase.LibraryCommandIdentifier"/> to the command line after CommandName and before the parameters
            if <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandLibraryResponderBase.IsLibraryCommand"/> is true
            </summary>
            <param name="commandLine">The command line to append to</param>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandLibraryResponderBase.IsLibraryCommand">
            <summary>
            Gets or sets a value indicating whether to insert a value into the command to identify the command as a libary command.
            This also sets up the responder to only respond to commands that have the library command
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommand">
            <summary>
            Defines an ASCII command that can be performed on any device supporting the TSL ASCII 2.0 Protocol
            </summary>
            <remarks>
            A TSLAsciiCommand can be executed using any object that implements the TSLAsciiCommandExecuting protocol.
            The command can be executed either asynchronously or synchronously (by setting synchronousCommandResponder prior to execution).
            Synchronous commands prevent the issue of subsequent commands until the command’s response has been received.
            </remarks>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommand.CommandLine">
            <summary>
            Returns the Ascii command line (including terminators) to be sent to the device to execute the command
            </summary>
            <returns>
            The ASCII command line to execute the command
            </returns>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommand.CommandName">
            <summary>
            Gets the Ascii command identifier e.g. ‘.vr’ or ‘.da’
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommand.MaxSynchronousWaitTime">
            <summary>
            Gets or sets the maximum time in seconds to wait for this command to complete when invoked synchronously
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiSelfResponderCommandBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AsciiSelfResponderCommandBase class
            </summary>
            <param name="commandName">The command name e.g. ".iv" for Inventory</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiSelfResponderCommandBase.ToString">
            <summary>
            Returns a string representation of this instance
            </summary>
            <returns>The name of the command</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiSelfResponderCommandBase.BuildCommandLine(System.Text.StringBuilder)">
            <summary>
            Inserts a sequential identifier into the command line if <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiSelfResponderCommandBase.IsIndexedCommand"/> is true
            </summary>
            <param name="commandLine">The command line to append to</param>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiSelfResponderCommandBase.IsIndexedCommand">
            <summary>
            Gets or sets a value indicating whether each command sent is given a sequential identifier.
            Also affects the responder to only respond to the command with the specific identifier
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiSelfResponderCommandBase.MaxSynchronousWaitTime">
            <summary>
            Gets or sets the maximum time to wait for this command to complete when invoked synchronously
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.AsciiCommandBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AsciiCommandBase class
            </summary>
            <param name="commandName">The command name (e.g. ".iv" for inventory)</param>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.ParameterCommandBase.resetParameters">
            <summary>
            The reset to defaults parameter
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.ParameterCommandBase.readParameters">
            <summary>
            The read parameters parameter
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.ParameterCommandBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ParameterCommandBase class
            </summary>
            <param name="commandName">The command name</param>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.ParameterCommandBase.ResetParameters">
            <summary>
            Gets or sets a value indicating whether to set all parameters to their default values before executing the command
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.ParameterCommandBase.ReadParameters">
            <summary>
            Gets or sets a value indicating whether the response to the command should report all supported parameters abd their current values
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ICommandParameters">
            <summary>
            Parameters for generic control of ASCII commands
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ICommandParameters.ReadParameters">
            <summary>
            Gets or sets a value indicating whether the command should request the response 
            includes a list of supported parameters and their current values
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ICommandParameters.ResetParameters">
            <summary>
            Gets or sets a value indicating whether the command should reset all its parameters to default values
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ICommandParameters.TakeNoAction">
            <summary>
            Gets or sets a value indicating whether the command primary action should not be performed
            (e.g. InventoryCommand will not perform the inventory action)
            All other actions, such as setting parameters in the reader are performed
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.ActionCommandBase.takeNoAction">
            <summary>
            The take no action parameter
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.ActionCommandBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ActionCommandBase class
            </summary>
            <param name="commandName">The command name</param>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.ActionCommandBase.TakeNoAction">
            <summary>
            Gets or sets a value indicating whether the command should only update the parameters and not perform the action of the command
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IResponseParameters">
            <summary>
            Generic parameters for command responses
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IResponseParameters.IncludeDateTime">
            <summary>
            Gets or sets a value indicating whether DateTime stamps appear in reader responses
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IResponseParameters.UseAlert">
            <summary>
            Gets or sets a value indicating whether alerts are enabled for the executing commands
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.AlertDateTimeCommandBase.performAlert">
            <summary>
            Gets a value indicating whether the alert is sounded when a barcode is read
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.AlertDateTimeCommandBase.includeDateTime">
            <summary>
            Gets a value indicating whether the date and time is included in the response when a barcode is read
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.AlertDateTimeCommandBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AlertDateTimeCommandBase class
            </summary>
            <param name="commandName">The command name</param>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.AlertDateTimeCommandBase.UseAlert">
            <summary>
            Gets or sets a value indicating whether the alert is sounded when a barcode is read.
            Set to null to not change the value
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.AlertDateTimeCommandBase.IncludeDateTime">
            <summary>
            Gets or sets a value indicating whether the date and time is included in the response when a barcode is read
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.AlertDateTimeCommandBase.IsAlertSupported">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.AlertDateTimeCommandBase.UseAlert"/> property is supported for this command
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ITransponderParameters">
            <summary>
            Parameters related to the Transponder information in command responses
            </summary>
            <seealso cref="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.TransponderParameterCollection"/>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ITransponderParameters.IncludeChecksum">
            <summary>
            Gets or sets a value indicating whether to include checksum information in reader responses
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ITransponderParameters.IncludeIndex">
            <summary>
            Gets or sets a value indicating whether to include index numbers for multiple values in reader responses
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ITransponderParameters.IncludePC">
            <summary>
            Gets or sets a value indicating whether to include the EPC PC value in reader responses
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ITransponderParameters.IncludeTransponderRssi">
            <summary>
            Gets or sets a value indicating whether to include RSSI value in reader responses
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.TranspondersCommandBase.transponderResponder">
            <summary>
            Handles responses relating to a transponder
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.TranspondersCommandBase.antennaParameter">
            <summary>
            Holds the antenna parameter
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.TranspondersCommandBase.transponderParameters">
            <summary>
            Holds the transponder parameters
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.TranspondersCommandBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TranspondersCommandBase class
            </summary>
            <param name="commandName">The command name (e.g. ".iv" for inventory)</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.TranspondersCommandBase.OnTransponderReceived(TechnologySolutions.Rfid.AsciiProtocol.TransponderDataEventArgs)">
            <summary>
            Called for each transponder received in the response
            </summary>
            <param name="e">The data about the transponder received</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.TranspondersCommandBase.TransponderResponder_TransponderReceived(System.Object,TechnologySolutions.Rfid.AsciiProtocol.TransponderDataEventArgs)">
            <summary>
            Relays the received transponder to the event of this command
            </summary>
            <param name="sender">The event source</param>
            <param name="e">Data provided for the event</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.TranspondersCommandBase.Response_ReceivedLine(System.Object,TechnologySolutions.Rfid.AsciiProtocol.AsciiLineEventArgs)">
            <summary>
            Relays a received line to the transponderResponder for transponder processing
            </summary>
            <param name="sender">The event source</param>
            <param name="e">Data provided for the event</param>
        </member>
        <member name="E:TechnologySolutions.Rfid.AsciiProtocol.Commands.TranspondersCommandBase.TransponderReceived">
            <summary>
            Raised when a transponder is received
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.TranspondersCommandBase.OutputPower">
            <summary>
            Gets or sets the output power
            </summary>
            <remarks>
            Valid power range is 10 - 29.
            Use AntennaParameters.OutputPowerNotSpecified to read the output power.
            </remarks>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.TranspondersCommandBase.IncludeChecksum">
            <summary>
            Gets or sets a value indicating whether to include checksum information in reader responses
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.TranspondersCommandBase.IncludeIndex">
            <summary>
            Gets or sets a value indicating whether to include index numbers for multiple values in reader responses
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.TranspondersCommandBase.IncludePC">
            <summary>
            Gets or sets a value indicating whether to include the EPC PC value in reader responses
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.TranspondersCommandBase.IncludeTransponderRssi">
            <summary>
            Gets or sets a value indicating whether to include RSSI value in reader responses
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.TranspondersCommandBase.Transponders">
            <summary>
            Gets the transponders received since the start of the last command
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.TranspondersCommandBase.IsIncludeIndexSupported">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.TranspondersCommandBase.IncludeIndex"/> property is supported by this command
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IQueryParameters">
            <summary>
            Specifies properties to select transponders into distinct groups
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IQueryParameters.QuerySelect">
            <summary>
            Gets or sets the transponders to include based on the select flag state
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IQueryParameters.QuerySession">
            <summary>
            Gets or sets the transponders to include based on the select flag state
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IQueryParameters.QueryTarget">
            <summary>
            Gets or sets the session state of the transponders to be included in this operation
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ISelectParameters">
            <summary>
            Parameters for Select operations in commands and responses
            </summary>
            <seealso cref="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.SelectParameterCollection"/>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ISelectParameters.InventoryOnly">
            <summary>
            Gets or sets a value indicating whether only the inventory is performed (the select operation is not performed before the inventory when set to Yes)
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ISelectParameters.SelectAction">
            <summary>
            Gets or sets the action to perform in the Select operation
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ISelectParameters.SelectBank">
            <summary>
            Gets or sets the Bank to use for the select mask
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ISelectParameters.SelectData">
            <summary>
            Gets or sets the select mask data in 2 character ASCII Hex pairs padded to ensure full bytes
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ISelectParameters.SelectLength">
            <summary>
            Gets or sets the length in bits of the select mask
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ISelectParameters.SelectOffset">
            <summary>
            Gets or sets the number of bits from the start of the block to the start of the select mask
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ISelectParameters.SelectTarget">
            <summary>
            Gets or sets the target flag for the Select operation
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.QuerySelectTransponderCommandBase.selectParameters">
            <summary>
            Holds the select parameters
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.QuerySelectTransponderCommandBase.valueOfQ">
            <summary>
            Parameter for Q value
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.QuerySelectTransponderCommandBase.querySelect">
            <summary>
            Parameter for query select
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.QuerySelectTransponderCommandBase.querySession">
            <summary>
            Parameter for query session
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.QuerySelectTransponderCommandBase.queryTarget">
            <summary>
            Parameter for query target
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.QuerySelectTransponderCommandBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the QuerySelectTransponderCommandBase class
            </summary>
            <param name="commandName">The command name (e.g. ".iv" for inventory)</param>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.QuerySelectTransponderCommandBase.QValue">
            <summary>
            Gets or sets the Q value for fixed Q operations (0-15)
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.QuerySelectTransponderCommandBase.QuerySelect">
            <summary>
            Gets or sets the transponders to include based on the select flag state
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.QuerySelectTransponderCommandBase.QuerySession">
            <summary>
            Gets or sets the transponders to include based on the select flag state
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.QuerySelectTransponderCommandBase.QueryTarget">
            <summary>
            Gets or sets the session state of the transponders to be included in this operation
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.QuerySelectTransponderCommandBase.InventoryOnly">
            <summary>
            Gets or sets a value indicating whether only the inventory is performed (the select operation is not performed before the inventory when set to Yes)
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.QuerySelectTransponderCommandBase.SelectAction">
            <summary>
            Gets or sets the action to perform in the Select operation
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.QuerySelectTransponderCommandBase.SelectBank">
            <summary>
            Gets or sets the Bank to use for the select mask
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.QuerySelectTransponderCommandBase.SelectData">
            <summary>
            Gets or sets the select mask data in 2 character ASCII Hex pairs padded to ensure full bytes
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.QuerySelectTransponderCommandBase.SelectLength">
            <summary>
            Gets or sets the length in bits of the select mask
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.QuerySelectTransponderCommandBase.SelectOffset">
            <summary>
            Gets or sets the number of bits from the start of the block to the start of the select mask
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.QuerySelectTransponderCommandBase.SelectTarget">
            <summary>
            Gets or sets the target flag for the Select operation
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.TransponderAccessCommandBase.accessPassword">
            <summary>
            Backing field for <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.TransponderAccessCommandBase.AccessPassword"/>
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.TransponderAccessCommandBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TransponderAccessCommandBase class
            </summary>
            <param name="commandName">The command name (e.g. ".iv" for inventory)</param>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.TransponderAccessCommandBase.AccessPassword">
            <summary>
            Gets or sets the password required to access transponders
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.TransponderMemoryCommandBase.databankParameters">
            <summary>
            Holds the databank parameters
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.TransponderMemoryCommandBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TransponderMemoryCommandBase class
            </summary>
            <param name="commandName">The command name (e.g. ".iv" for inventory)</param>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.TransponderMemoryCommandBase.Bank">
            <summary>
            Gets or sets the transponder data bank to be used
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.TransponderMemoryCommandBase.Length">
            <summary>
            Gets or sets the length in words of the data to write
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.TransponderMemoryCommandBase.Offset">
            <summary>
            Gets or sets the offset, in 16 bit words, from the start of the memory bank to where the data will be written
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.ReadTransponderCommand.#ctor">
            <summary>
            Initializes a new instance of the ReadTransponderCommand class
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.InventoryCommand">
            <summary>
            ASCII commnad to perform an inventory
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IQAlgorithmParameters">
            <summary>
            Provides properties to control the Q algorithm and value
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IQAlgorithmParameters.QAlgorithm">
            <summary>
            Gets or sets the Q algorithm type
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IQAlgorithmParameters.QValue">
            <summary>
            Gets or sets the Q value for fixed Q operations (0-15)
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.InventoryCommand.algorithm">
            <summary>
            Parameter for QAlgrotihmn
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.InventoryCommand.fastIdentifier">
            <summary>
            Parameter for fast indenitier
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.InventoryCommand.tagFocus">
            <summary>
            Parameter for tag focus
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.InventoryCommand.#ctor">
            <summary>
            Initializes a new instance of the InventoryCommand class
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.InventoryCommand.QAlgorithm">
            <summary>
            Gets or sets the Q algorithm type
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.InventoryCommand.FastIdentifier">
            <summary>
            Gets or sets a value indicating whether the Impinj fast ID extension is enabled
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.InventoryCommand.TagFocus">
            <summary>
            Gets or sets a value indicating whether the Impinj extension Tag Focus is enabled
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.BatteryStatusCommand">
            <summary>
            A command to query the reader for battery status information
            Note: This does not yet expose the charging status via a property but the 'CH:' line is captured in the response property 
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.BatteryStatusCommand.#ctor">
            <summary>
            Initializes a new instance of the BatteryStatusCommand class
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.BatteryStatusCommand.BatteryLevel">
            <summary>
            Gets the battery level retrieved from the reader. 
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.BatteryStatusCommand.ChargeStatus">
            <summary>
            Gets the charge status retrived from the reader.
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase">
            <summary>
            A base class that implements responder chain management
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommandExecuting">
            <summary>
            Defines the responsibilities of classes that can execute and respond to a TSLAsciiCommand
            </summary>
            <remarks>
            Responses to an executed TSLAsciiCommand (see executeCommand:) are handled through a responder chain (see responderChain)
            The responder chain is an ordered list of TSLAsciiCommandResponder that is traversed from the first responder added to the last.
            Each correctly terminated response line that has been received is passed to the TSLAsciiCommandResponder’s processReceivedLine: method.
            If a responder returns YES from the processReceivedLine method then the traversal ends otherwise it continues until all responders have been visited.
            </remarks>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommandExecuting.AddResponder(TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommandResponder)">
            <summary>
            Add a responder to the responder chain
            </summary>
            <param name="responder">The responder to add to the chain</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommandExecuting.AddSynchronousResponder">
            <summary>
            Add the synchronous responder into the chain
            </summary>
            <remarks>
            This is a special responder that despatches responses through a command’s synchronousCommandResponder property
            There will only ever be one of these in the command chain
            </remarks>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommandExecuting.ClearResponders">
            <summary>
            Clear all responders from the responder chain
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommandExecuting.ExecuteCommand(TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommand,TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommandSynchronousResponder)">
            <summary>
            Execute the given command.
            </summary>
            <param name="command">The command to be executed</param>
            <param name="synchronousResponder">
            For command to execute synchronously (not return until complete) set this to a responder to receive the command response.
            To execute the command asynchronously and let the responder chain handle the events set this to null
            </param>
            <remarks>
            Warning: derived classes must call the base implementation to ensure synchronous commands work correctly
            </remarks>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommandExecuting.RemoveResponder(TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommandResponder)">
            <summary>
            Remove a responder from the responder chain
            </summary>
            <param name="responder">The responder to remove from the chain</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommandExecuting.RemoveSynchronousResponder">
            <summary>
            Remove the synchronous responder from the chain
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommandExecuting.ResponderChain">
            <summary>
            Gets the chain of TSLAsciiCommandResponders
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.log">
            <summary>
            Provides logging for this class
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.disposed">
            <summary>
            True once this instance is disposed
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.responderLock">
            <summary>
            Used to synchronize acccess to the responder chain
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.responderChain">
            <summary>
            Backing field for <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.ResponderChain"/>
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.synchronousResponder">
            <summary>
            Holds the synchronous responder instance that relays to synchronous commands
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.awaitingCommandResponse">
            <summary>
            True while waiting for a response to a synchronous command
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.responseReceived">
            <summary>
            True once a response is received
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.commandSync">
            <summary>
            Provides synchronization to command execution
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.commandCondition">
            <summary>
            Signalled when a command completes
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.#ctor">
            <summary>
            Initializes a new instance of the AsciiCommandExecutorBase class
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.Send(System.String)">
            <summary>
            Send the given string as a CrLf terminated string, to the reader.
            This method waits until the command has been successfuly sent
            </summary>
            <param name="line">line The ASCII string to send to the device</param>
            <exception cref="T:System.InvalidOperationException">if no device is connected  </exception>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.ExecuteCommand(TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommand,TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommandSynchronousResponder)">
            <summary>
            Execute the given command.
            </summary>
            <param name="command">The command to be executed</param>
            <param name="synchronousResponder">
            For command to execute synchronously (not return until complete) set this to a responder to receive the command response.
            To execute the command asynchronously and let the responder chain handle the events set this to null
            </param>
            <remarks>
            Command execution is asynchronous unless the command has a (non-nil) synchronousCommandResponder then
            the command will be executed synchronously. Synchronous behaviour requires prior call to addSynchronousResponder.
            Warning: derived classes must call the base implementation to ensure synchronous commands work correctly
            </remarks>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.AddResponder(TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommandResponder)">
            <summary>
            Add a responder to the responder chain
            </summary>
            <param name="responder">The responder to add</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.RemoveResponder(TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommandResponder)">
            <summary>
            Remove a responder from the responder chain
            </summary>
            <param name="responder">The responder to remove</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.AddSynchronousResponder">
            <summary>
            Add the synchronous responder into the chain
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.RemoveSynchronousResponder">
            <summary>
            Remove the synchronous responder from the chain
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.ClearResponders">
            <summary>
            Clear all responders from the responder chain
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.Dispose">
            <summary>
            Disposes an instance of the AsciiCommandExecutorBase class
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.Dispose(System.Boolean)">
            <summary>
            Disposes an instance of the AsciiCommandExecutorBase class
            </summary>
            <param name="disposing">True to dispose managed as well as native resources</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.ProcessReceivedLines(System.Collections.Generic.ICollection{System.String})">
            <summary>
            This should be called when new data is received from the reader
            </summary>
            <param name="receivedLines">A number of complete lines received from the reader</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.ProcessReceivedLine(System.String,System.Int32,System.Boolean)">
            <summary>
            Called from <see cref="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.ProcessReceivedLines(System.Collections.Generic.ICollection{System.String})"/> to process each line received from the reader
            </summary>
            <param name="line">The received line</param>
            <param name="lineNumber">The line number in the set of lines being processed</param>
            <param name="moreAvailable">True if not the last line in the set</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.ExecuteCommand(System.String,System.Boolean,System.Int32)">
            <summary>
            Execute the given command.
            </summary>
            <param name="commandLine">The command line to be executed</param>
            <param name="waitResponse">
            When true the method blocks until the command completes or the timeoutMilliseconds is reached (synchronous command)
            When false the method returns after sending the command to the reader (asynchronous command)
            </param>
            <param name="timeoutMilliseconds">The time in milliseconds to wait for a response when executing a synchronous command</param>
            <remarks>
            Command execution is asynchronous unless the command has a (non-nil) synchronousCommandResponder then
            the command will be executed synchronously. Synchronous behaviour requires prior call to addSynchronousResponder.
            Warning: derived classes must call the base implementation to ensure synchronous commands work correctly
            </remarks>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.IsResponsive">
            <summary>
            Gets a value indicating whether the last command completed as expected i.e. did not timeout.
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.LastActivityTime">
            <summary>
            Gets or sets the time of the readers last activity (send or receive) 
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.LastCommandLine">
            <summary>
            Gets the last command line sent
            </summary>
            <remarks>
            Because TSLAsciiCommands add a unique id number each time their commandLine property is accessed this property can be used 
            (primarily for debugging) to get the actual command line issued (if examined immediately after the command is executed) 
            </remarks>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.ResponderChain">
            <summary>
            Gets the chain of responders that handle responses to commands
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.HasSynchronousResponder">
            <summary>
            Gets a value indicating whether the chain has a synchronous responder
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponseLine">
            <summary>
            Represents a single line of ASCII response with a header, colon separator and value (e.g. ME: this is a message)
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponseLine.FullLine">
            <summary>
            Gets the full line
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponseLine.Header">
            <summary>
            Gets the two character header without the colon
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponseLine.Value">
            <summary>
            Gets the value of the line. The value after the colon with whitespace from the start and end removed
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponse">
            <summary>
            A response to as <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommand"/>
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponse.ErrorCode">
            <summary>
            Gets the error code or an empty string if none
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponse.IsSuccessful">
            <summary>
            Gets a value indicating whether the command executed successfully
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponse.Messages">
            <summary>
            Gets the messages received from the last response
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponse.Parameters">
            <summary>
            Gets the parameters received from the last responde
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponse.Response">
            <summary>
            Gets all the lines as received from the last response
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommandResponder">
            <summary>
            The interface for classes that handle responses from ASCII 2.x commands
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommandResponder.ProcessReceivedLine(TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponseLine,System.Boolean)">
            <summary>
            Each correctly terminated line from the device is passed to this method for processing
            </summary>
            <param name="line">The line to be processed</param>
            <param name="moreLinesAvailable">When true indictates there are additional lines to be processed (and will also be passed to this method)</param>
            <returns>True if this line should not be passed to any other responder</returns>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Deletion">
            <summary>
            The set of values that are appropriate for the delete parameter
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Deletion.Yes">
            <summary>
            Deletion has been requested
            </summary>        
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.VersionInformationCommand">
            <summary>
            A command to query the reader for version information
            </summary>
            <remarks>
            Since ASCII Protocol v2.2 the version command also reports the Bluetooth address
            </remarks>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.VersionInformationCommand.#ctor">
            <summary>
            Initializes a new instance of the VersionInformationCommand class
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.VersionInformationCommand.Manufacturer">
            <summary>
            Gets the manufacturer name retrived from the reader
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.VersionInformationCommand.SerialNumber">
            <summary>
            Gets the serial number retrived from the reader
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.VersionInformationCommand.FirmwareVersion">
            <summary>
            Gets the FirmwareVersion retrived from the reader
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.VersionInformationCommand.BootloaderVersion">
            <summary>
            Gets the bootloader verion name retrived from the reader
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.VersionInformationCommand.RadioSerialNumber">
            <summary>
            Gets the radio serial number retrived from the reader
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.VersionInformationCommand.RadioFirmwareVersion">
            <summary>
            Gets the radio firmware version retrived from the reader
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.VersionInformationCommand.RadioBootloaderVersion">
            <summary>
            Gets the radio bootloader version retrived from the reader
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.VersionInformationCommand.AntennaSerialNumber">
            <summary>
            Gets the antenna serial number retrived from the reader
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.VersionInformationCommand.AsciiProtocol">
            <summary>
            Gets the ASCII protocol retrived from the reader
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.VersionInformationCommand.BluetoothAddress">
            <summary>
            Gets the Bluetooth Address of the reader (ASCII Protocol 2.2 or higher)
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.BluetoothCommand">
            <summary>
            A command to configure of read the Bluetooth parameters
            </summary>
            <remarks>
            The Bluetooth command is currently only supported over USB to change the Bluetooth connection parameters.
            The command has a default timeout of around 20s
            - Reading the Bluetooth can take about 5 seconds
            - Writing the Bluetooth can take about 10 seconds
            - Resetting the Bluetooth can take about 15 seconds
            </remarks>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.BluetoothCommand.bundleIdentifier">
            <summary>
            Backing field for BundleIdentifier
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.BluetoothCommand.bundleSeed">
            <summary>
            Backing field for BundleSeed
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.BluetoothCommand.friendlyName">
            <summary>
            Backing field for BluetoothFriendlyName
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.BluetoothCommand.pairingCode">
            <summary>
            Backing field for PairingCode
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.BluetoothCommand.#ctor">
            <summary>
            Initializes a new instance of the BluetoothCommand class
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.BluetoothCommand.Response_ReceivedLine(System.Object,TechnologySolutions.Rfid.AsciiProtocol.AsciiLineEventArgs)">
            <summary>
            Captures the bluetooth friendly name read
            </summary>
            <param name="sender">The event source</param>
            <param name="e">Data provided for the event</param>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.BluetoothCommand.BundleIdentifier">
            <summary>
            Gets or sets the bundle identifier used in iOS applications to program to the reader
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.BluetoothCommand.BundleSeed">
            <summary>
            Gets or sets the bundle seed indentifier used in iOS applications to program to the reader
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.BluetoothCommand.BluetoothFriendlyName">
            <summary>
            Gets or sets the Bluetooth friendly name to program to the reader
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.BluetoothCommand.PairingCode">
            <summary>
            Gets or sets the four digit pairing code to program to the reader
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.BluetoothCommand.AuthenticationChip">
            <summary>
            Gets the result of the Authentication chip self test
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.BluetoothCommand.BluetoothAddress">
            <summary>
            Gets the Bluetooth address as read from the reader
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.BarcodeCommand">
            <summary>
            A command to scan a barcode
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.BarcodeCommand.barcodeEscaped">
            <summary>
            The barcode escaped parameter
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.BarcodeCommand.scanTime">
            <summary>
            The scan time parameter
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.BarcodeCommand.#ctor">
            <summary>
            Initializes a new instance of the BarcodeCommand class
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.BarcodeCommand.BarcodeEscape(System.String)">
            <summary>
            Utility function to remove the escape characters from an escaped barcode response
            </summary>
            <param name="value">The barcode response to remove the escape sequences from</param>
            <returns>The barcode response without the escapes</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.BarcodeCommand.OnBarcodeReceived(System.String,System.DateTime)">
            <summary>
            Raises the <see cref="E:TechnologySolutions.Rfid.AsciiProtocol.Commands.BarcodeCommand.BarcodeReceived"/> event
            </summary>
            <param name="barcode">The barcode received</param>
            <param name="timestamp">The timestamp received</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.BarcodeCommand.Response_CommandComplete(System.Object,System.EventArgs)">
            <summary>
            When the command completes, if a barcode has been scanned successfully, raise the BarcodeReceived event
            </summary>
            <param name="sender">The event source</param>
            <param name="e">Data provided for the event</param>
        </member>
        <member name="E:TechnologySolutions.Rfid.AsciiProtocol.Commands.BarcodeCommand.BarcodeReceived">
            <summary>
            Raised when a barcode is received
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.BarcodeCommand.IsBarcodeEscaped">
            <summary>
            Gets or sets a value indicating whether the barcode response is escaped to escape '\' (0x5c) for Cr Lf and itself.
            Set to null to not change the current value
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.BarcodeCommand.ScanTime">
            <summary>
            Gets or sets the maximum time to wait for a barcode to be scanned 1 to 9 seconds
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.BarcodeCommand.Timestamp">
            <summary>
            Gets the timestamp when the barcode was scanned if date and time stamp is enabled
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.BarcodeCommand.Barcode">
            <summary>
            Gets the barcode scanned if the command was successful
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.AlertDuration">
            <summary>
            The set of values that are appropriate for the <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.AlertCommand.AlertDuration"/>
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AlertDuration.Short">
            <summary>
            A short duration has been specified and is sent as 'sho'_
            </summary>        
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AlertDuration.Medium">
            <summary>
            A medium duration has been specified and is sent as 'med'_
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AlertDuration.Long">
            <summary>
            A long duration has been specified and is sent as 'lon'_
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchActionCommand">
            <summary>
            A command to set the action of the reader's switch
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchActionCommand.singlePressAction">
            <summary>
            The single press parameter
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchActionCommand.doublePressAction">
            <summary>
            The double press parameter
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchActionCommand.reportingEnabled">
            <summary>
            The report switch action parameter
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchActionCommand.doublePressRepeatDelay">
            <summary>
            Backing field for DoublePressRepeatDelay
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchActionCommand.singlePressRepeatDelay">
            <summary>
            Backing field for SinglePressRepeatDelay
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchActionCommand.#ctor">
            <summary>
            Initializes a new instance of the SwitchActionCommand class
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchActionCommand.AsynchronousReportingEnabled">
            <summary>
            Gets or sets a value indicating whether asynchronous switch status reports should be reported.
            When set to NotSpecified the asynchronous reporting state is unchanged.
            If readParameters is specified then after execution this property will reflect the current state 
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchActionCommand.SinglePressAction">
            <summary>
            Gets or sets the aciotn to perform for a single press of trigger
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchActionCommand.DoublePressAction">
            <summary>
            Gets or sets the aciotn to perform for a double press of trigger
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchActionCommand.DoublePressRepeatDelay">
            <summary>
            Gets or sets the delay in milliseconds before the double press switch action is repeated (1 to 999 ms)
            </summary>
            <remarks>
            Added for ASCII Protocol v2.2 and higher
            </remarks>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchActionCommand.SinglePressRepeatDelay">
            <summary>
            Gets or sets the delay in milliseconds before the single press switch action is repeated (1 to 999 ms)
            </summary>
            <remarks>
            Added for ASCII Protocol v2.2 and higher
            </remarks>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.TransponderSelectCommand">
            <summary>
            This command is used to set the state of transponders. 
            It pushes matching and non-matching transponders in to the state determined by the -sa parameter. 
            This command can only be used with persistent target sessions as the carrier will be turned off after the command.
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.TransponderSelectCommand.antennaParameter">
            <summary>
            Backing field for <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.TransponderSelectCommand.OutputPower"/>
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.TransponderSelectCommand.selectParameters">
            <summary>
            Holds the set of select parameters
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.TransponderSelectCommand.#ctor">
            <summary>
            Initializes a new instance of the TransponderSelectCommand class
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.TransponderSelectCommand.OutputPower">
            <summary>
            Gets or sets the output power
            </summary>
            <remarks>
            Valid power range is 10 - 29.
            Use AntennaParameters.OutputPowerNotSpecified to read the output power.
            </remarks>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.TransponderSelectCommand.SelectAction">
            <summary>
            Gets or sets the action to perform in the Select operation
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.TransponderSelectCommand.SelectBank">
            <summary>
            Gets or sets the Bank to use for the select mask
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.TransponderSelectCommand.SelectData">
            <summary>
            Gets or sets the select mask data in 2 character ASCII Hex pairs padded to ensure full bytes
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.TransponderSelectCommand.SelectLength">
            <summary>
            Gets or sets the length in bits of the select mask
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.TransponderSelectCommand.SelectOffset">
            <summary>
            Gets or sets the number of bits from the start of the block to the start of the select mask
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.TransponderSelectCommand.SelectTarget">
            <summary>
            Gets or sets the target flag for the Select operation
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Constants">
            <summary>
            Global constants for the library
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Constants.CommandFormatProvider">
            <summary>
            Gets the format provider to use for number and string parsing
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Constants.LogFormatProvider">
            <summary>
            Gets the format provider to use for log message formatting
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Constants.ErrorFormatProvider">
            <summary>
            Gets the format provider to use for exception message formatting
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.DateCommand">
            <summary>
            A command to obtain or set the date of the reader's real time clock
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.DateCommand.date">
            <summary>
            The date parameter
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.DateCommand.#ctor">
            <summary>
            Initializes a new instance of the DateCommand class
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.DateCommand.Response_ReceivedLine(System.Object,TechnologySolutions.Rfid.AsciiProtocol.AsciiLineEventArgs)">
            <summary>
            Captures from the response the date read from the device
            </summary>
            <param name="sender">The event source</param>
            <param name="e">Data provided for the event</param>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.DateCommand.Date">
            <summary>
            Gets or sets the date to read or write (time is ignored)
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchSinglePressCommand">
            <summary>
            A command that activates the single press switch action for the specified number of seconds
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchSinglePressCommand.duration">
            <summary>
            The press duration parameter
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchSinglePressCommand.#ctor">
            <summary>
            Initializes a new instance of the SwitchSinglePressCommand class
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchSinglePressCommand.PressDuration">
            <summary>
            Gets or sets the duration in seconds the switch remains pressed
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.SleepTimeoutCommand">
            <summary>
            Sets the timeout before the reader sleeps if there are no connections to the reader
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.SleepTimeoutCommand.duration">
            <summary>
            The sleep timeout parameter
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.SleepTimeoutCommand.#ctor">
            <summary>
            Initializes a new instance of the SleepTimeoutCommand class
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.SleepTimeoutCommand.SleepTimeout">
            <summary>
            Gets or sets the sleep timeout in seconds (15 .. 999) after a disconnect when the reader will sleep
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.SelectParameterCollection">
            <summary>
            Helper class for implementing <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ISelectParameters"/>
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Parameters.SelectParameterCollection.inventoryOnly">
            <summary>
            Backing field for <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.SelectParameterCollection.InventoryOnly"/>
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Parameters.SelectParameterCollection.selectAction">
            <summary>
            Backing field for <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.SelectParameterCollection.SelectAction"/>
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Parameters.SelectParameterCollection.selectBank">
            <summary>
            Backing field for <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.SelectParameterCollection.SelectBank"/>
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Parameters.SelectParameterCollection.selectData">
            <summary>
            Backing field for <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.SelectParameterCollection.SelectData"/>
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Parameters.SelectParameterCollection.selectLength">
            <summary>
            Backing field for <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.SelectParameterCollection.SelectLength"/>
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Parameters.SelectParameterCollection.selectOffset">
            <summary>
            Backing field for <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.SelectParameterCollection.SelectOffset"/>
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Parameters.SelectParameterCollection.selectTarget">
            <summary>
            Backing field for <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.SelectParameterCollection.SelectTarget"/>
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.SelectParameterCollection.#ctor">
            <summary>
            Initializes a new instance of the SelectParameterCollection class
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.SelectParameterCollection.InventoryOnly">
            <summary>
            Gets or sets a value indicating whether only the inventory should be performed (no select)
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.SelectParameterCollection.SelectAction">
            <summary>
            Gets or sets the select action
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.SelectParameterCollection.SelectBank">
            <summary>
            Gets or sets the Databank used for the select mask
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.SelectParameterCollection.SelectData">
            <summary>
            Gets or sets the data used for the select mask
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.SelectParameterCollection.SelectLength">
            <summary>
            Gets or sets the number of bits used in the select mask
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.SelectParameterCollection.SelectOffset">
            <summary>
            Gets or sets the offset in bits into the Databank to compare to the select mask
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.SelectParameterCollection.SelectTarget">
            <summary>
            Gets or sets the select target
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterHex">
            <summary>
            Represents a parameter on the command line that is represented as an ASCII hex string
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterText">
            <summary>
            Represents a command line parameter that has a text value
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterText.minimumLength">
            <summary>
            Backing field for <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterText.MinimumLength"/>
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterText.maximumLength">
            <summary>
            Backing field for <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterText.MaximumLength"/>
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterText.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the ParameterText class
            </summary>
            <param name="identifier">The character(s) that identify the parameter on the command line</param>
            <param name="minimumLength">The minimum length of the string</param>
            <param name="maximumLength">The maximum length of the string</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterText.#ctor(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterText class
            </summary>
            <param name="identifier">The character(s) that identify the parameter on the command line</param>
            <param name="minimumLength">The minimum length of the string</param>
            <param name="maximumLength">The maximum length of the string</param>
            <param name="quoted">True if the string is output surrounded with double quotes on the command line</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterText.ParseValue(System.String)">
            <summary>
            Attempt to parse the value from the command line and assign value to the parsed value
            </summary>
            <param name="value">The value to parse</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value is outside the permitted range</exception>
            <exception cref="T:System.FormatException">If the parameter is not in the expected format</exception>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterText.CheckValue(System.String)">
            <summary>
            Checks the text is within the length constraints as the Value property is assigned
            </summary>
            <param name="value">The value to test</param>
            <returns>The value to assign to the value</returns>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterText.IsQuoted">
            <summary>
            Gets or sets a value indicating whether the value output to the command line is surrounded in double quotes
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterText.MinimumLength">
            <summary>
            Gets or sets the minimum length of the text in characters
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterText.MaximumLength">
            <summary>
            Gets or sets the maximum length of the text in characters
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterHex.hexCharacters">
            <summary>
            Characters that can be used to make up the hex value
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterHex.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the ParameterHex class
            </summary>
            <param name="identifier">The character(s) that identify the parameter on the command line</param>
            <param name="minimumLength">The minimum length of the string</param>
            <param name="maximumLength">The maximum length of the string</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterHex.CheckValue(System.String)">
            <summary>
            Checks the value is valid as the Value property is assigned
            </summary>
            <param name="value">The value to check</param>
            <returns>The checked value</returns>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.LoggerResponder">
            <summary>
            A simple responder that inserts every line it sees, preceded by '>', into the standard log file 
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.LoggerResponder.log">
            <summary>
            Provides logging for this class
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.LoggerResponder.ProcessReceivedLine(TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponseLine,System.Boolean)">
            <summary>
            Captures the line to the log
            </summary>
            <param name="line">The line to log</param>
            <param name="moreLinesAvailable">True if more lines are going to be passed to this method</param>
            <returns>False to allow other IAsciiCommandResponders to process the responses also</returns>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteSingleTransponderCommand">
            <summary>
            A command to write data to the memory banks of a single transponder only 
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteSingleTransponderCommand.accessPassword">
            <summary>
            Backing field for <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteSingleTransponderCommand.AccessPassword"/>
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteSingleTransponderCommand.data">
            <summary>
            Backing field for <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteSingleTransponderCommand.Data"/>
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteSingleTransponderCommand.databankParameters">
            <summary>
            Holds the databank parameters
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteSingleTransponderCommand.selectParameters">
            <summary>
            Holds the select parameters
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteSingleTransponderCommand.#ctor">
            <summary>
            Initializes a new instance of the WriteSingleTransponderCommand class
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteSingleTransponderCommand.IsTransponderFound">
            <summary>
            Gets a value indicating whether a transponder responded to the command
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteSingleTransponderCommand.WordsWritten">
            <summary>
            Gets the number of words successfully written to the transponder
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteSingleTransponderCommand.AccessPassword">
            <summary>
            Gets or sets the password required to access transponders
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteSingleTransponderCommand.Bank">
            <summary>
            Gets or sets the transponder data bank to be used
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteSingleTransponderCommand.Length">
            <summary>
            Gets or sets the length in words of the data to write
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteSingleTransponderCommand.Offset">
            <summary>
            Gets or sets the offset, in 16 bit words, from the start of the memory bank to where the data will be written
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteSingleTransponderCommand.Data">
            <summary>
            Gets or sets the data read from or written to a transponder memory bank
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteSingleTransponderCommand.SelectBank">
            <summary>
            Gets or sets the Bank to use for the select mask
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteSingleTransponderCommand.SelectData">
            <summary>
            Gets or sets the select mask data in 2 character ASCII Hex pairs padded to ensure full bytes
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteSingleTransponderCommand.SelectLength">
            <summary>
            Gets or sets the length in bits of the select mask
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteSingleTransponderCommand.SelectOffset">
            <summary>
            Gets or sets the number of bits from the start of the block to the start of the select mask
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterBool">
            <summary>
            Represents a parameter which is either present or not and does not have an associated value. For example take no action '-n'
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterBool.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ParameterBool class
            </summary>
            <param name="identifier">The character(s) that identify the parameter on the command line</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterBool.ParseValue(System.String)">
            <summary>
            Attempt to parse the value from the command line and assign value to the parsed value
            </summary>
            <param name="value">The value to parse</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value is outside the permitted range</exception>
            <exception cref="T:System.FormatException">If the parameter is not in the expected format</exception>
            <remarks>
            The ParameterBool is a special case. If the parameter identifier is present on the command line
            the value is true. This requires the value being reset to false before attempting to parse the value
            </remarks>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponder">
            <summary>
            Provides an event to notify listeners as lines are received as part of a command response
            </summary>
        </member>
        <member name="E:TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponder.CommandComplete">
            <summary>
            Raised when the command receives the OK or ER response
            </summary>
        </member>
        <member name="E:TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponder.CommandStarted">
            <summary>
            Raised when the command receives the CS header
            </summary>
        </member>
        <member name="E:TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponder.ReceivedLine">
            <summary>
            Raised as each line of a response is received
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponseResponder">
            <summary>
            Extends the <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponse"/> with the <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponder"/> event
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponseResponder.AcceptedHeaders">
            <summary>
            Gets the headers that are accepted as part of the response to this command
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.QuerySelect">
            <summary>
            Specifies the query select type in <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IQueryParameters"/>
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.QuerySelect.All">
            <summary>
            All (selected and not selected transponders)
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.QuerySelect.NotSelected">
            <summary>
            Not selected transponders only
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.QuerySelect.Selected">
            <summary>
            Selected transponders only
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.SleepCommand">
            <summary>
            A command to send the reader to sleep as soon as it has responded to this command
            Note: this will disconnect the reader from the terminal
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.SleepCommand.#ctor">
            <summary>
            Initializes a new instance of the SleepCommand class
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.EchoCommand">
            <summary>
            This command determines whether the command sent is echoed back to the host or not
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.EchoCommand.echoEnabled">
            <summary>
            Backing field for the EchoEnabled command
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.EchoCommand.#ctor">
            <summary>
            Initializes a new instance of the EchoCommand class
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.EchoCommand.EchoEnabled">
            <summary>
            Gets or sets a value indicating whether the commands are echoed by the reader before sending the response. Null to use the current value
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchSinglePressUserActionCommand">
            <summary>
            Command to set the "usr" action of the switch single press
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchSinglePressUserActionCommand.singlePressUserAction">
            <summary>
            Backing field for SinglePressUserAction
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchSinglePressUserActionCommand.#ctor">
            <summary>
            Initializes a new instance of the SwitchSinglePressUserActionCommand class
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchSinglePressUserActionCommand.ValidateAndParseParameters(System.String,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Parses a command line or PR: value and updates the commands parameter to match.
            Returns validation messages for any errors encountered
            </summary>
            <param name="parameterLine">The parameters to parse</param>
            <param name="parameters">output the parameter line split into individual parameters</param>
            <returns>Any validtion messages arising from parsing the parameter line</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchSinglePressUserActionCommand.Response_ReceivedLine(System.Object,TechnologySolutions.Rfid.AsciiProtocol.AsciiLineEventArgs)">
            <summary>
            Captures the value from the responder
            </summary>
            <param name="sender">The event source</param>
            <param name="e">Data provided for the event</param>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchSinglePressUserActionCommand.SinglePressUserAction">
            <summary>
            Gets or sets the single command to perform when the switch is in the single press state (e.g. ".bc")
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.CommandHelper">
            <summary>
            Provides utilty methods for helping with commands
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.CommandHelper.ValidateAndParseSwitchParameter(System.String,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Parses a command line or PR: value and outputs the parameters in the case where a single -s parameter is expected
            Returns validation messages for any errors encountered
            </summary>
            <param name="parameterLine">The parameters to parse</param>
            <param name="parameters">output the parameter line split into individual parameters</param>
            <returns>Any validtion messages arising from parsing the parameter line</returns>
            <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchSinglePressUserActionCommand"/>
            <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchDoublePressUserActionCommand"/>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.CommandHelper.SplitParameters(System.String)">
            <summary>
            Splits the given line into parameters separated by '-' but preserving quoted ("like - this") strings
            </summary>
            <param name="value">The parameters to parse</param>
            <returns>The individual parameters parsed from the line</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.CommandHelper.NextQuoteDash(System.String,System.Int32)">
            <summary>
            Returns the index of the next quote, double quote or dash in value after strartIndex
            </summary>
            <param name="value">The string to search</param>
            <param name="startIndex">The index to search from</param>
            <returns>The index of the first character found after startIndex or -1 if no character found</returns>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchStateCommand">
            <summary>
            ASCII command to query the switch state
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchStateCommand.#ctor">
            <summary>
            Initializes a new instance of the SwitchStateCommand class
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchStateCommand.State">
            <summary>
            Gets the last switch state received from the device
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteTransponderCommand">
            <summary>
            A command to write data to the memory banks of one or more transponders 
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteTransponderCommand.data">
            <summary>
            Backing field for <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteTransponderCommand.Data"/>
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteTransponderCommand.writeMode">
            <summary>
            Parameter write mode
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteTransponderCommand.writeExtensions">
            <summary>
            Parameter write extensions
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteTransponderCommand.#ctor">
            <summary>
            Initializes a new instance of the WriteTransponderCommand class
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteTransponderCommand.Data">
            <summary>
            Gets or sets the data read from or written to a transponder memory bank
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteTransponderCommand.WriteMode">
            <summary>
            Gets or sets the write mode used to write to the transponder
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteTransponderCommand.WriteExtensions">
            <summary>
            Gets or sets the Impinj extension setting for the BlockWrite command
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.CommandParser">
            <summary>
            Provides operations for commands
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.CommandParser.sync">
            <summary>
            Provides sync for the static creation of objects
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.CommandParser.availableCommands">
            <summary>
            The cache of available commands
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.CommandParser.ParseCommandLine(System.String)">
            <summary>
            Parses commandLine into an <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommand"/> instance. Returns null if the command is not recognised
            </summary>
            <param name="commandLine">The command</param>
            <returns>A command instance with the parameters parsed from the command line or null if the command was not recgnised</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.CommandParser.TryParseCommandLine(TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommand@,System.String)">
            <summary>
            Attempts to parse commandLine and output as result. Returns a list of validation errors if any
            </summary>
            <param name="result">The command identified from the command line</param>
            <param name="commandLine">the command line to parse</param>
            <returns>Validation messages indicating errors from the command line if any</returns>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.CommandParser.AvailableCommands">
            <summary>
            Gets the list of commands defined in this library
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommandSynchronousResponder">
            <summary>
            Extends <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommandResponder"/> to provide properties and methods required for synchronous execution
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommandSynchronousResponder.ClearLastResponse">
            <summary>
            Clears the values from the last response
            </summary>
            <remarks>
            Derived classes must call super class to ensure correct operation
            </remarks>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommandSynchronousResponder.IsResponseFinished">
            <summary>
            Gets a value indicating whether the response is complete (i.e. received OK: or ER:)
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.TransponderAccessErrorCode">
            <summary>
            Codes returned from the reader when a transponder access operation fails (Header = "EA")
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.TransponderAccessErrorCode.HandleMismatch">
            <summary>
            Handle mismatch
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.TransponderAccessErrorCode.CrcErrorOnTransponderResponse">
            <summary>
            CRC error on transponder response
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.TransponderAccessErrorCode.NoTransponderReply">
            <summary>
            No transponder reply
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.TransponderAccessErrorCode.InvalidPassword">
            <summary>
            Invalid password
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.TransponderAccessErrorCode.ZeroKillPassword">
            <summary>
            Zero kill password
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.TransponderAccessErrorCode.TransponderLost">
            <summary>
            Transponder lost
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.TransponderAccessErrorCode.CommandFormatError">
            <summary>
            Command format error
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.TransponderAccessErrorCode.ReadCountInvalid">
            <summary>
            Read count invalid
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.TransponderAccessErrorCode.OutOfRetries">
            <summary>
            Out of retries
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.TransponderAccessErrorCode.OperationFailed">
            <summary>
            Operation failed
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.SelectTarget">
            <summary>
            Specifies the session to target in <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ISelectParameters"/>
            </summary>
            <remarks>
            select( TSL_SelectTarget_NotSpecified = 0,  @"",       @"Not specified"     )\
            select( TSL_SelectTarget_S0,                @"s0",     @"Session 0"         )\
            select( TSL_SelectTarget_S1,                @"s1",     @"Session 1"         )\
            select( TSL_SelectTarget_S2,                @"s2",     @"Session 2"         )\
            select( TSL_SelectTarget_S3,                @"s3",     @"Session 3"         )\
            select( TSL_SelectTarget_SL,                @"sl",     @"Select"            )
            </remarks>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.SelectTarget.S0">
            <summary>
            Use session 0
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.SelectTarget.S1">
            <summary>
            Use session 1
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.SelectTarget.S2">
            <summary>
            Use session 2
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.SelectTarget.S3">
            <summary>
            Use session 3
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.SelectTarget.SL">
            <summary>
            Use select flag
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.QuerySession">
            <summary>
            Specifies the query session in <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IQueryParameters"/>
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.QuerySession.S0">
            <summary>
            Target session 0
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.QuerySession.S1">
            <summary>
            Target session 1
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.QuerySession.S2">
            <summary>
            Target session 2
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.QuerySession.S3">
            <summary>
            Select session 3
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchDoublePressUserActionCommand">
            <summary>
            Command to set the "usr" action for the switch double press
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchDoublePressUserActionCommand.doublePressUserAction">
            <summary>
            Backing field for the DoublePressUserAction
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchDoublePressUserActionCommand.#ctor">
            <summary>
            Initializes a new instance of the SwitchDoublePressUserActionCommand class
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchDoublePressUserActionCommand.ValidateAndParseParameters(System.String,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Parses a command line or PR: value and updates the commands parameter to match.
            Returns validation messages for any errors encountered
            </summary>
            <param name="parameterLine">The parameters to parse</param>
            <param name="parameters">output the parameter line split into individual parameters</param>
            <returns>Any validtion messages arising from parsing the parameter line</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchDoublePressUserActionCommand.Response_ReceivedLine(System.Object,TechnologySolutions.Rfid.AsciiProtocol.AsciiLineEventArgs)">
            <summary>
            Captures the value from the responder
            </summary>
            <param name="sender">The event source</param>
            <param name="e">Data provided for the event</param>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchDoublePressUserActionCommand.DoublePressUserAction">
            <summary>
            Gets or sets the single command to perform when the switch is in the double press state (e.g. ".bc")
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponder">
            <summary>
            Extends the AsciiResponse to actually respond to commands
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponse">
            <summary>
            Provides a base implementation of <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponse"/>
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponse.log">
            <summary>
            Provides logging for this class
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponse.withinLog">
            <summary>
            Handles the special case of a log download where OK or ER is not the end of response but part of the log
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponse.response">
            <summary>
            Backing field for <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponse.Response"/>
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponse.#ctor">
            <summary>
            Initializes a new instance of the AsciiResponse class
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponse.ClearLastResponse">
            <summary>
            Clears the response ready to receive a new one
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponse.AppendToResponse(TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponseLine)">
            <summary>
            Append the given string to the current <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponse.Response"/>
            </summary>
            <param name="line">The line to append to the current response</param>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponse.ErrorCode">
            <summary>
            Gets the error code received. Once as response has been cleared this will return null until OK or ER is received.
            If OK is received the value is set to string.Empty. If ER is received the value is set to the error code
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponse.IsSuccessful">
            <summary>
            Gets a value indicating whether the response is successfull (Ended with OK:)
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponse.IsResponseFinished">
            <summary>
            Gets a value indicating whether the response has received OK: or ER:
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponse.Messages">
            <summary>
            Gets the messages received during the response
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponse.Parameters">
            <summary>
            Gets the parameters received during the response
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponse.Response">
            <summary>
            Gets the lines received during the response
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponder.responseStarted">
            <summary>
            Set to true while the response is being received
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponder.#ctor">
            <summary>
            Initializes a new instance of the AsciiResponder class
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponder.ProcessReceivedLine(TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponseLine,System.Boolean)">
            <summary>
            Each correctly terminated line from the device is passed to this method for processing
            </summary>
            <param name="line">The line to be processed</param>
            <param name="moreLinesAvailable">
            When true indictates there are additional lines to be processed (and will also be passed to this method)
            </param>
            <returns>True if this line should not be passed to any other responder</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponder.ClearLastResponse">
            <summary>
            Clears the response ready to receive a new one
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponder.OnCommandComplete">
            <summary>
            Raises the <see cref="E:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponder.CommandComplete"/> event
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponder.OnCommandStarted">
            <summary>
            Raises the <see cref="E:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponder.CommandStarted"/> event
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponder.OnProcessReceivedLine(TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponseLine,System.Boolean)">
            <summary>
            Raises the <see cref="E:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponder.ReceivedLine"/> event
            </summary>
            <param name="line">The line recived</param>
            <param name="moreToFollow">True if more lines are already buffered</param>
            <returns>True if a listener handled the response</returns>
        </member>
        <member name="E:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponder.CommandComplete">
            <summary>
            Raised when a command completed
            </summary>
        </member>
        <member name="E:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponder.CommandStarted">
            <summary>
            Raised when a command started
            </summary>
        </member>
        <member name="E:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponder.ReceivedLine">
            <summary>
            Raised when a line is received
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponder.MatchCommandLine">
            <summary>
            Gets or sets the partial command line that should be matched by the value of the CS line to indicate a command has started.
            For example to match any reponse to a type of command ".iv" or to match only library inventory commands ".iv LCMD"
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponder.AcceptedHeaders">
            <summary>
            Gets the collection of headers accepted by this response. Lists the headers of the <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponse"/> lines
            that will be captured into the <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponse.Response"/>
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.TransponderDataEventArgs">
            <summary>
            EventArgs when a transponder is reported from an inventory
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.TransponderDataEventArgs.#ctor(TechnologySolutions.Rfid.AsciiProtocol.TransponderData,System.Boolean)">
            <summary>
            Initializes a new instance of the TransponderDataEventArgs class
            </summary>
            <param name="transponder">The transponder to report</param>
            <param name="moreAvailable">True if more transponders are expected to be reported after this event</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.TransponderDataEventArgs.ToString">
            <summary>
            Returns a string representation of this instance
            </summary>
            <returns>A string representation of this instance</returns>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderDataEventArgs.MoreAvailable">
            <summary>
            Gets a value indicating whether more transponders are to be reported
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderDataEventArgs.Transponder">
            <summary>
            Gets the transponder reported
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.SwitchAction">
            <summary>
            Types of switch action
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.SwitchAction.Off">
            <summary>
            Off - no action
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.SwitchAction.Read">
            <summary>
            Read - perform the command with the last specified parameters
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.SwitchAction.Write">
            <summary>
            Write - perform the command with the last specified parameters
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.SwitchAction.Inventory">
            <summary>
            Inventory - perform the command with the last specified parameters
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.SwitchAction.Barcode">
            <summary>
            Barcode - perform the command with the last specified parameters
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.SwitchAction.User">
            <summary>
            Perform the user specified command
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.LockCommand">
            <summary>
            A command to lock transponders that match the specified select criteria
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.LockCommand.lockPayload">
            <summary>
            Parameter for lock payload
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.LockCommand.#ctor">
            <summary>
            Initializes a new instance of the LockCommand class
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.LockCommand.LockPayload">
            <summary>
            Gets or sets the lock payload
            </summary>
            <seealso cref="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.LockCommand.LockPayload"/>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.BarcodeEventArgs">
            <summary>
            EventArgs where a barcode has been scanned
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.BarcodeEventArgs.#ctor(System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the BarcodeEventArgs class
            </summary>
            <param name="barcode">The barcode scanned</param>
            <param name="timestamp">The timestamp the barcode was recived or DateTime.MinValue if not timestamped</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.BarcodeEventArgs.ToString">
            <summary>
            Returns a string representation of this instance
            </summary>
            <returns>A string represenation of the barcode data</returns>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.BarcodeEventArgs.Barcode">
            <summary>
            Gets the barcode scanned
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.BarcodeEventArgs.Timestamp">
            <summary>
            Gets the timestamp when the barcode was received or <see cref="F:System.DateTime.MinValue"/> if not timestamped
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.TransponderData">
            <summary>
            Represents a transponder response from an Inventory, read or write command
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.TransponderData.#ctor(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the TransponderData class
            </summary>
            <param name="crc">The Crc value</param>
            <param name="epc">The Epc value</param>
            <param name="index">The Index value</param>
            <param name="killed">True if the transponder was killed</param>
            <param name="locked">True if the transponder was locked</param>
            <param name="pc">The Pc value</param>
            <param name="readData">The ReadData value</param>
            <param name="rssi">The Rssi value</param>
            <param name="transponderIdentifier">The transponder identifier reported as part of an Impinj Fast ID inventory response</param>
            <param name="wordsWritten">The WordsWritten value</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.TransponderData.#ctor(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.DateTime,System.Nullable{TechnologySolutions.Rfid.AsciiProtocol.TransponderAccessErrorCode},System.Nullable{TechnologySolutions.Rfid.AsciiProtocol.TransponderBackscatterErrorCode},System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the TransponderData class
            </summary>
            <param name="crc">The Crc value</param>
            <param name="epc">The Epc value</param>
            <param name="index">The Index value</param>
            <param name="killed">True if the transponder was killed</param>
            <param name="locked">True if the transponder was locked</param>
            <param name="pc">The Pc value</param>
            <param name="readData">The ReadData value</param>
            <param name="rssi">The Rssi value</param>
            <param name="timestamp">The timestamp the transponder was returned</param>
            <param name="transponderAccessErrorCode">The error code returned from the reader why the transponder access failed</param>
            <param name="transponderBackscatterErrorCode">The error code returned from the transponder why the transponder access failed</param>
            <param name="transponderIdentifier">The transponder identifier reported as part of an Impinj Fast ID inventory response</param>
            <param name="wordsWritten">The WordsWritten value</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.TransponderData.AppendTo(System.Text.StringBuilder)">
            <summary>
            Appends the values of each property to the builder with an appropriate header if the property has a value
            </summary>
            <param name="builder">The StringBuilder to append to</param>
            <returns>The builder instance</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.TransponderData.ToString">
            <summary>
            Returns a string representation of this instance using <see cref="M:TechnologySolutions.Rfid.AsciiProtocol.TransponderData.AppendTo(System.Text.StringBuilder)"/>
            </summary>
            <returns>A string representation of this instance</returns>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderData.Crc">
            <summary>
            Gets the CRC part of an inventory response from a transponder
            or null (Nothing in Visual Basic) if CRC output is not enabled
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderData.Epc">
            <summary>
            Gets the EPC part of an inventory response from a transponder
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderData.Index">
            <summary>
            Gets the Index of the transponder or null (Nothing in Visual Basic) if index output ("IX:") is not enabled
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderData.IsKillSuccess">
            <summary>
            Gets a value indicating whether the transponder was killed successfully
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderData.IsLockSuccess">
            <summary>
            Gets a value indicating whether the transponder was locked successfully
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderData.Pc">
            <summary>
            Gets the PC part of an inventory response from a transponder 
            or null (Nothing in Visual Basic) if PC output is not enabled
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderData.ReadData">
            <summary>
            Gets the data read from the transponder (only applicable when raise from read commands)
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderData.Rssi">
            <summary>
            Gets the RSSI of a transponder in an inventory response
            or null (Nothing in Visual Basic) if RSSI output is not enabled
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderData.Timestamp">
            <summary>
            Gets the timestamp the transponder was read. This is the DT field if present of DateTime.MinValue if not available
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderData.TransponderAccessErrorCode">
            <summary>
            Gets the error code specified by the reader why the tag access operation on this transponder failed
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderData.TransponderBackscatterErrorCode">
            <summary>
            Gets the error code specified by the transponder why the tag access operation on this transponder failed
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderData.TransponderIdentifier">
            <summary>
            Gets the transponder identifier reported as part of an inventory response when using Fast ID in the Impinj extensions
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderData.WordsWritten">
            <summary>
            Gets the number of words written to the transponder (only applicable when raised from write commands)
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder">
            <summary>
            An implementation of the <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommandResponder"/> to capture the Autorun and Log files from a device. This responder
            should be inserted at the top of the responder chain as this responder is high traffic and will consume all the file (marking each
            line as proccessed) so it does not have to 'visit' all the responders in the chain.
            On seeing the start of a download a temporary file is created. All the lines are written out to the file until the download is complete.
            Then an event is raised with the filename to be copied to a sensible location
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder.disposed">
            <summary>
            True once an instance is disposed
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder.writer">
            <summary>
            The file being written to
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the FileDownloadResponder class
            </summary>
            <param name="fileBeginHeader">The header that indicates the start of the file contents e.g. "AB" or "LB"</param>
            <param name="fileEndHeader">The header that indicates the end of the file contents e.g. "AE" or "LE"</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder.AutorunFileDownloader">
            <summary>
            Returns a <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder"/> to capture an autorun file
            </summary>
            <returns>The instance to capture an Autorun file to a file</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder.LogFileDownloader">
            <summary>
            Returns a <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder"/> to capture a log file 
            </summary>
            <returns>The instance to capture a log from the device to a file</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder.Dispose">
            <summary>
            Disposes an instance of the FileDownloadResponder class
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder.ProcessReceivedLine(TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponseLine,System.Boolean)">
            <summary>
            Captures output from the file download command to a temporary file. Raises an event as the file is closed
            </summary>
            <param name="line">The line to record</param>
            <param name="moreLinesAvailable">True if more lines are going to be passed to this method</param>
            <returns>False to allow other IAsciiCommandResponders to process the responses also</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder.Dispose(System.Boolean)">
            <summary>
            Disposes an instance of the FileDownloadResponder class
            </summary>
            <param name="disposing">True to dispose managed and well as native resources</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder.OnDownloadComplete">
            <summary>
            Raises the <see cref="E:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder.DownloadComplete"/> event
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder.OnDownloading">
            <summary>
            Raises the <see cref="E:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder.Downloading"/> event
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder.OnDownloadStarted">
            <summary>
            Raises the <see cref="E:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder.DownloadStarted"/> event
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder.CreateLogFile">
            <summary>
            Closes any previously open file and starts a new download
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder.CloseFile">
            <summary>
            Closes any open file and raises the <see cref="E:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder.DownloadComplete"/> event
            </summary>
        </member>
        <member name="E:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder.DownloadComplete">
            <summary>
            Event raised when a file download is completed
            </summary>
        </member>
        <member name="E:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder.Downloading">
            <summary>
            Event raised periodically while a file is downloading
            </summary>
        </member>
        <member name="E:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder.DownloadStarted">
            <summary>
            Event raised when a file download is started
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder.FileBeginHeader">
            <summary>
            Gets the header that indicates the start of the file download
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder.FileEndHeader">
            <summary>
            Gets the header that indicates the end of the file download
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder.FileName">
            <summary>
            Gets the name of the last file that was downloaded from the unit
            </summary>
            <remarks>
            This provides the name of the file created when the <see cref="E:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder.DownloadComplete"/> event is raised
            </remarks>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder.LineCount">
            <summary>
            Gets the number of lines downloaded
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.FileDownloadResponder.IsWithinFile">
            <summary>
            Gets a value indicating whether a file is currently being written
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.ChargeStatus">
            <summary>
            Indicates the status of charging
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.ChargeStatus.Unknown">
            <summary>
            The state is not known
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.ChargeStatus.Off">
            <summary>
            Battery is not charging
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.ChargeStatus.Charging">
            <summary>
            Battery is charging
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.ChargeStatus.Complete">
            <summary>
            Battery is fully charged
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.ChargeStatus.Error">
            <summary>
            There is an error preventing charging
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.ExecuteAutorunCommand">
            <summary>
            This command will force the autorun file to run
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.ExecuteAutorunCommand.#ctor">
            <summary>
            Initializes a new instance of the ExecuteAutorunCommand class
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteCommandToAutorunCommand">
            <summary>
            Writes an ASCII command to the Autorun file
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteCommandToAutorunCommand.command">
            <summary>
            Backing field for the Autorun parameter
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteCommandToAutorunCommand.#ctor">
            <summary>
            Initializes a new instance of the WriteCommandToAutorunCommand class
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.WriteCommandToAutorunCommand.Command">
            <summary>
            Gets or sets the valid ASCII command line that is to be written to the Autorun file
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.TriState">
            <summary>
            Allows an action to be set on or off or not specified to leave the current value unchanged
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.TriState.Yes">
            <summary>
            TSL_TriState_YES - The value has been specified and is sent as 'on'
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.TriState.No">
            <summary>
            TSL_TriState_NO - The value has been specified and is sent as 'off'
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.TimeCommand">
            <summary>
            A command to obtain or set the time of the reader's real-time clock 
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.TimeCommand.time">
            <summary>
            The time parameter
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.TimeCommand.#ctor">
            <summary>
            Initializes a new instance of the TimeCommand class
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.TimeCommand.Response_ReceivedLine(System.Object,TechnologySolutions.Rfid.AsciiProtocol.AsciiLineEventArgs)">
            <summary>
            Captures from the response the date read from the device
            </summary>
            <param name="sender">The event source</param>
            <param name="e">Data provided for the event</param>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.TimeCommand.Time">
            <summary>
            Gets or sets the time to write to the reader. 
            Set to null (Nothing in Visual Basic) to read the current time
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseLine">
            <summary>
            Represents an ASCII response line (e.g. ME: message)
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseLine.HeaderCommandStarted">
            <summary>
            The line header for Command Started "CS"
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseLine.HeaderParameters">
            <summary>
            The line header for Parameters "PR"
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseLine.HeaderMessage">
            <summary>
            The line header for message "ME"
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseLine.HeaderOk">
            <summary>
            The line header for OK "OK"
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseLine.HeaderError">
            <summary>
            The line header for Error "ER"
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseLine.header">
            <summary>
            Backing field for Header
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseLine.value">
            <summary>
            Backing field for Value
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseLine.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AsciiResponseLine class
            </summary>
            <param name="fullLine">The fullline containing header and value received from the reader</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseLine.ParseFullLine">
            <summary>
            Splits the <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseLine.FullLine"/> into <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseLine.Header"/> and <see cref="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseLine.Value"/>
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseLine.FullLine">
            <summary>
            Gets the full line
            </summary>        
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseLine.Header">
            <summary>
            Gets the two character header without the colon
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseLine.Value">
            <summary>
            Gets the value of the line. The value after the colon with whitespace from the start and end removed
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.TransponderResponder">
            <summary>
            Processes responses looking for transponder header and collects into a transponder.
            Calls the TransponderReceivedHandler for each transponder received
            </summary>
            <remarks>
            <para>
            Captures the EP CR PC RI responses to form a <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.TransponderData"/> instance.
            Captures WW as WordsWritten and RD as data read
            Captures OK ER to raise TransponderReceived at the end of a response;
            </para>
            <para>
            The delegate is called if:
            - A new EPC is received and the current EPC is valid (moreAvailable = true). Just received the EPC of the next response
            - OK or ER is received and the current EPC is valid (moreAvailable = false). End of the command
            - TransponderComplete is called. This is provided for when a base class handles OR or ER and needs to complete a transponder
            </para>
            </remarks>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.TransponderResponder.transponders">
            <summary>
            Cache of transponders seen since last command start
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.TransponderResponder.#ctor">
            <summary>
            Initializes a new instance of the TransponderResponder class
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.TransponderResponder.ClearLastResponse">
            <summary>
            Clears the list of transponders seen and the current transponder
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.TransponderResponder.ClearLastTransponder">
            <summary>
            Clears the cache of values ready to receive a new transponder
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.TransponderResponder.ProcessReceivedLine(System.String,System.String)">
            <summary>
            Each correctly terminated line from the device is passed to this method for processing
            </summary>
            <param name="header">The response line header excluding the colon e.g. 'CS' for a command started response</param>
            <param name="value">The response line following the colon e.g. '.iv'</param>
            <returns>
            Return true if this line should NOT be passed to any other responder.
            </returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.TransponderResponder.TransponderComplete(System.Boolean)">
            <summary>
            When called this method checks to see if the Epc is not empty. If the EPC is valid then <see cref="M:TechnologySolutions.Rfid.AsciiProtocol.TransponderResponder.OnTransponderComplete(TechnologySolutions.Rfid.AsciiProtocol.TransponderData,System.Boolean)"/>
            if called to notify the delegate of the transponder received. Once called the response is reset with <see cref="M:TechnologySolutions.Rfid.AsciiProtocol.TransponderResponder.ClearLastResponse"/>
            </summary>
            <param name="moreAvailable">True if more transponders are pending to be notified</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.TransponderResponder.OnTransponderComplete(TechnologySolutions.Rfid.AsciiProtocol.TransponderData,System.Boolean)">
            <summary>
            Raises the <see cref="E:TechnologySolutions.Rfid.AsciiProtocol.TransponderResponder.TransponderReceived"/>  event
            </summary>
            <param name="transponder">The transponder properties</param>        
            <param name="moreAvailable">True if more transponders are buffered to be notified</param>
        </member>
        <member name="E:TechnologySolutions.Rfid.AsciiProtocol.TransponderResponder.TransponderReceived">
            <summary>
            Raised for each transponder received
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderResponder.Crc">
            <summary>
            Gets the last received transponder CRC
            </summary>
            <remarks>
            The reader will only output this value if the command is enabled to do so.
            This will return null (Nothing in Visual Basic) if not received for the current transponder
            </remarks>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderResponder.Epc">
            <summary>
            Gets the last received transponder EPC
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderResponder.Index">
            <summary>
            Gets the last received transponder index
            </summary>
            <remarks>
            The reader will only output this value if the command is enabled to do so.
            This will return null (Nothing in Visual Basic) if not received for the current transponder
            </remarks>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderResponder.IsKillSuccess">
            <summary>
            Gets a value indicating whether the transponder was killed successfully
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderResponder.IsLockSuccess">
            <summary>
            Gets a value indicating whether the transponder was locked successfully
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderResponder.Pc">
            <summary>
            Gets the last received transponder PC
            </summary>
            <remarks>
            The reader will only output this value if the command is enabled to do so.
            This will return null (Nothing in Visual Basic) if not received for the current transponder
            </remarks>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderResponder.Rssi">
            <summary>
            Gets the last received transponder RSSI
            </summary>
            <remarks>
            The reader will only output this value if the command is enabled to do so.
            This will return null (Nothing in Visual Basic) if not received for the current transponder
            </remarks>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderResponder.ReadData">
            <summary>
            Gets the data read from the transponder in hex
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderResponder.Timestamp">
            <summary>
            Gets the timestamp reported by the reader if reported as DT otherwise DateTime.MinValue
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderResponder.TransponderAccessErrorCode">
            <summary>
            Gets the error code specified by the reader why the tag access operation on this transponder failed
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderResponder.TransponderBackscatterErrorCode">
            <summary>
            Gets the error code specified by the transponder why the tag access operation on this transponder failed
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderResponder.TransponderIdentifier">
            <summary>
            Gets the transponder identifier reported as part of an inventory response when using Fast ID in the Impinj extensions
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderResponder.WordsWritten">
            <summary>
            Gets the number of words successfully written to the transponder
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.TransponderResponder.Transponders">
            <summary>
            Gets the transponders received since the last call to <see cref="M:TechnologySolutions.Rfid.AsciiProtocol.TransponderResponder.ClearLastResponse"/>
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.TransponderParameterCollection">
            <summary>
            Helper class for implementing <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ITransponderParameters"/>
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Parameters.TransponderParameterCollection.includeChecksum">
            <summary>
            Backing field for IncludeChecksum
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Parameters.TransponderParameterCollection.includeIndex">
            <summary>
            Backing field for IncludeIndex
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Parameters.TransponderParameterCollection.includePc">
            <summary>
            Backing field for IncludePC
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Parameters.TransponderParameterCollection.includeTransponderRssi">
            <summary>
            Backing field for IncludeTransponderRssi
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.TransponderParameterCollection.#ctor">
            <summary>
            Initializes a new instance of the TransponderParameterCollection class
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.TransponderParameterCollection.IncludeChecksum">
            <summary>
            Gets or sets a value indicating whether to include the checksum for transponder responses
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.TransponderParameterCollection.IncludeIndex">
            <summary>
            Gets or sets a value indicating whether to include the index for transponder responses
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.TransponderParameterCollection.IncludePC">
            <summary>
            Gets or sets a value imdicating whether to include the PC for transponder responses
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Parameters.TransponderParameterCollection.IncludeTransponderRssi">
            <summary>
            Gets or sets a value indicating whether to include transponder RSSI for transponder responses
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.TransponderWriteExtension">
            <summary>
            Defines the Impinj Extension options for the BlockWrite command as used with <see cref="F:TechnologySolutions.Rfid.AsciiProtocol.TransponderWriteMode.BlockWrite"/>
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.TransponderWriteExtension.Auto">
            <summary>
            Auto. The reader will select the most appropriate mode
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.TransponderWriteExtension.ForceOne">
            <summary>
            Force 1. Block write will always write one word at a time
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.TransponderWriteExtension.ForceTwo">
            <summary>
            Force 2. Block write will always write two words at a time
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.TransponderBackscatterErrorCode">
            <summary>
            Codes returned from the transponder when a tag access operation fails
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.TransponderBackscatterErrorCode.GeneralError">
            <summary>
            General error
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.TransponderBackscatterErrorCode.MemoryDoesNotExistOrThePcValueIsNotSupported">
            <summary>
            Memory does not exist or the PC value is not supported
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.TransponderBackscatterErrorCode.MemoryIsLockedOrPermalocked">
            <summary>
            Memory is lock or permalocked
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.TransponderBackscatterErrorCode.TransponderHasInsufficientPower">
            <summary>
            Transponder has insufficient power
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.TransponderBackscatterErrorCode.TransponderDoesNotSupportErrorSpecificCodes">
            <summary>
            Transponder does not support error specific codes
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.KillCommand">
            <summary>
            A command to kill transponders that match the specified select criteria
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.KillCommand.killPassword">
            <summary>
            Parameter for kill password
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.KillCommand.#ctor">
            <summary>
            Initializes a new instance of the KillCommand class
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.KillCommand.KillPassword">
            <summary>
            Gets or sets the kill password
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.SynchronousDispatchResponder">
            <summary>
            This is a special TSLAsciiCommandResponder that is inserted into the responder chain to handle synchronous commands. 
            This responder uses its synchronousCommandDelegate to find the currently executing synchronous command. 
            If such a command exists then this responder forwards calls to processReceivedLine:moreLinesAvailable: to the synchronous command's synchronousCommandResponder 
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.SynchronousDispatchResponder.ClearLastResponse">
            <summary>
            Clears the values from the last response
            </summary>
            <remarks>
            Derived classes must call super class to ensure correct operation
            </remarks>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.SynchronousDispatchResponder.ProcessReceivedLine(TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponseLine,System.Boolean)">
            <summary>
            Each correctly terminated line from the device is passed to this method for processing
            </summary>
            <param name="line">The line to be processed</param>
            <param name="moreLinesAvailable">When YES indictates there are additional lines to be processed (and will also be passed to this method)</param>
            <returns>YES if this line should not be passed to any other responder</returns>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.SynchronousDispatchResponder.SynchronousCommandResponder">
            <summary>
            Gets or sets the <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommandResponder"/> of the currently executing synchronous <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.IAsciiCommand"/>
            </summary>
            <remarks>
            This property should be set to a synchronous command while it is executing and set to null once the command is complete
            </remarks>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.SynchronousDispatchResponder.IsResponseFinished">
            <summary>
            Gets a value indicating whether the response is complete (i.e. received OK: or ER:)
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.QAlgorithm">
            <summary>
            Specifies a Q algorithm to use in <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IQAlgorithmParameters"/>
            </summary>
            <remarks>
            select( TSL_QAlgorithm_NotSpecified = 0,  @"",       @"Not specified"   )\
            select( TSL_QAlgorithm_Fixed,             @"fix",    @"Fixed"           )\
            select( TSL_QAlgorithm_Dynamic,           @"dyn",    @"Dynamic"         )
            </remarks>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.QAlgorithm.Fixed">
            <summary>
            TSL_QAlgorithm_Fixed - Fixed time-slots has been specified and is sent as 'fix'
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.QAlgorithm.Dynamic">
            <summary>
            TSL_QAlgorithm_Dynamic - Dynamic time-slots has been specified and is sent as 'dyn'
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Databank">
            <summary>
            Sepcify the databank to use in <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.IDatabankParameters"/>
            </summary>
            <remarks>
            select( TSL_DataBank_NotSpecified = 0,        @"",        @"Not specified"            )\
            select( TSL_DataBank_ElectronicProductCode,   @"epc",     @"Electronic Product Code"  )\
            select( TSL_DataBank_TransponderIdentifier,   @"tid",     @"Transponder Identifier"   )\
            select( TSL_DataBank_User,                    @"usr",     @"User"                     )\
            select( TSL_DataBank_Reserved,                @"res",     @"Reserved"                 )
            </remarks>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Databank.ElectronicProductCode">
            <summary>
            TSL_DataBank_ElectronicProductCode - The value has been specified and is sent as 'epc'
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Databank.TransponderIdentifier">
            <summary>
            TSL_DataBank_TransponderIdentifier - The value has been specified and is sent as 'tid'
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Databank.User">
            <summary>
            TSL_DataBank_User - The value has been specified and is sent as 'usr'
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Databank.Reserved">
            <summary>
            TSL_DataBank_Reserved - The value has been specified and is sent as 'res'
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.FactoryDefaultsCommand">
            <summary>
            A command to reset the reader to its default configuration 
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.FactoryDefaultsCommand.#ctor">
            <summary>
            Initializes a new instance of the FactoryDefaultsCommand class
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.ReadAutorunFileCommand">
            <summary>
            A command to read the Autorun file from the device
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.ReadAutorunFileCommand.deleteFile">
            <summary>
            Backing field for DeleteFile
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.ReadAutorunFileCommand.inAutorunFile">
            <summary>
            True while within the autorun file in the output
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.ReadAutorunFileCommand.#ctor">
            <summary>
            Initializes a new instance of the ReadAutorunFileCommand class
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.ReadAutorunFileCommand.Response_ReceivedLine(System.Object,TechnologySolutions.Rfid.AsciiProtocol.AsciiLineEventArgs)">
            <summary>
            Additional processing for lines within the commands response
            </summary>
            <param name="sender">The event source</param>
            <param name="e">Data provided for the event</param>
            <remarks>
            The contents of the autorun file is one command per line (i.e. not a well formed header line)
            Once we have seen the AB header and until we see the AE footer we want to signal to capture
            all these lines are part of the response
            </remarks>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.ReadAutorunFileCommand.DeleteFile">
            <summary>
            Gets or sets a value indicating whether to delete the file from the device
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.ReadAutorunFileCommand.AutorunFile">
            <summary>
            Gets the contents of the file
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.ReadLogFileCommand">
            <summary>
            A command to read the log file from the device
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.ReadLogFileCommand.commandLoggingEnabled">
            <summary>
            Backing field for IsCommandLoggingEnabled
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.ReadLogFileCommand.deleteFile">
            <summary>
            Backing field for DeleteFile
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.ReadLogFileCommand.withinLog">
            <summary>
            Used to determine when responses are within the log file
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.ReadLogFileCommand.#ctor">
            <summary>
            Initializes a new instance of the ReadLogFileCommand class
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.ReadLogFileCommand.Response_ReceivedLine(System.Object,TechnologySolutions.Rfid.AsciiProtocol.AsciiLineEventArgs)">
            <summary>
            Process the response including the entire log into the response
            </summary>
            <param name="sender">The event source</param>
            <param name="e">Data provided for the event</param>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.ReadLogFileCommand.IsCommandLoggingEnabled">
            <summary>
            Gets or sets a value indicating whether to command logging is enabled. Set to null to not change the current value
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.ReadLogFileCommand.DeleteFile">
            <summary>
            Gets or sets a value indicating whether to delete the file from the device
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.ReadLogFileCommand.LogFile">
            <summary>
            Gets the contents of the file
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.LicenceKeyCommand">
            <summary>
            This command reads, writes and deletes the Licence Key stored in the reader’s non-volatile memory. 
            The Licence Key can be up to 127 characters long and can contain any printable characters with the exception of double quotes ("). 
            How the licence key function is used is up to the programmer, it could be used to store a simple password or some form of 
            hashing could be used with the two unique strings, the serial number and Bluetooth address, returned from the .vr command.
            </summary>
            <remarks>Added for ASCII Protocol 2.2</remarks>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.LicenceKeyCommand.readParameters">
            <summary>
            Backing field for the read parameters parameter
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.LicenceKeyCommand.deleteKey">
            <summary>
            Backing field for DeleteKey
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.LicenceKeyCommand.licenceKey">
            <summary>
            Backing field for licence key
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.LicenceKeyCommand.#ctor">
            <summary>
            Initializes a new instance of the LicenceKeyCommand class
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.LicenceKeyCommand.DeleteKey">
            <summary>
            Gets or sets a value that when set to yes will erase the current licence key if present
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.LicenceKeyCommand.ReadParameters">
            <summary>
            Gets or sets a value indicating whether the response to the command should report all supported parameters abd their current values
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.LicenceKeyCommand.LicenceKey">
            <summary>
            Gets or sets the licence key to write to the reader. 
            After the command is executed returns the key read from the reader
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.AbortCommand">
            <summary>
            A command to terminate the current command and any pending commands. 
            It also stops any software switch presses that are in progress. 
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.AbortCommand.#ctor">
            <summary>
            Initializes a new instance of the AbortCommand class with the specified responder
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.CommandSequencer">
            <summary>
            Provides a unique command identifier for each command sent (where commands are indexed)
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.CommandSequencer.syncLock">
            <summary>
            Provides synchronisation for this object
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.CommandSequencer.commandIdentifier">
            <summary>
            Backing field for CommandIdentifier
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.CommandSequencer.NextCommandIdentifier">
            <summary>
            Advances the index to the next value
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.CommandSequencer.CommandIdentifier">
            <summary>
            Gets the current CommandIdentifier value
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterEnum`1">
            <summary>
            Defines a parameter that is derived from a specific set of values defined by an Enum (with appropriate extensions)
            </summary>
            <typeparam name="TEnum">The type of the enum</typeparam>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterEnum`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ParameterEnum class
            </summary>
            <param name="identifier">The character(s) that identify the parameter on the command line</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterEnum`1.AppendToCommandLine(System.Text.StringBuilder)">
            <summary>
            Appends the parameter to the command line if the value is not NotSpecified
            </summary>
            <param name="line">The command line to append to</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterEnum`1.ParseValue(System.String)">
            <summary>
            Attempt to parse the value from the command line and assign value to the parsed value
            </summary>
            <param name="value">The value to parse</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value is outside the permitted range</exception>
            <exception cref="T:System.FormatException">If the parameter is not in the expected format</exception>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterEnum`1.CheckValue(System.Nullable{`0})">
            <summary>
            Called when setting value to ensure the new value is valid
            </summary>
            <param name="value">The value to check</param>
            <returns>The new value to store</returns>
            <exception cref="T:System.ArgumentException">If the value assigned is not valid</exception>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterDateTime">
            <summary>
            A parameter that represent a date and/or time value
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterDateTime.parseFormat">
            <summary>
            The format used with DateTime.ParseExact to extract the DateTime from a command line
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterDateTime.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ParameterDateTime class
            </summary>
            <param name="identifier">The character(s) used to identify the parameter on the command line</param>
            <param name="parseFormat">A format string to extract the DateTime from the parameter</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Parameters.ParameterDateTime.ParseValue(System.String)">
            <summary>
            Attempt to parse the value from the command line and assign value to the parsed value
            </summary>
            <param name="value">The value to parse</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value is outside the permitted range</exception>
            <exception cref="T:System.FormatException">If the parameter is not in the expected format</exception>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.PasswordRestriction">
            <summary>
            Options to secure a transponder password using <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.LockPayload"/>
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.PasswordRestriction.Accessible">
            <summary>
            The password may be read and written when the tag is in either the open or secured states
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.PasswordRestriction.AlwaysAccessible">
            <summary>
            The password may be read and written when the tag is in either the open or 
            secured states and this access restriction should be set permanently. 
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.PasswordRestriction.SecuredAccessible">
            <summary>
            The password may be read or written only when the tag is in the secured state. 
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.PasswordRestriction.AlwaysNotAccessible">
            <summary>
            The password may not be read or written and this access restriction should be set permanently.
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.PasswordRestriction.NoChange">
            <summary>
            The password’s access restriction should remain unchanged. 
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.MemoryBankRestriction">
            <summary>
            Options to secure a memory bank using <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.LockPayload"/>
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.MemoryBankRestriction.Writable">
            <summary>
            The memory bank is writeable when the tag is in either the open or secured state.
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.MemoryBankRestriction.AlwaysWritable">
            <summary>
            The memory bank is writeable when the tag is in either the open or 
            secured state and this access restriction should be set permanently. 
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.MemoryBankRestriction.SecuredWritable">
            <summary>
            The memory bank is writeable only when the tag is in the secured state.
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.MemoryBankRestriction.AlwaysNotWritable">
            <summary>
            The memory bank is not writeable and this access restriction should be set permanently.
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.MemoryBankRestriction.NoChange">
            <summary>
            The memory bank’s access restriction should remain unchanged.
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.LockPayload">
            <summary>
            Encapsulates the restrictions available to protect an EPC C1G2 transponder
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.LockPayload.killPasswordRestriction">
            <summary>
            Restrictions for the kill password
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.LockPayload.accessPasswordRestriction">
            <summary>
            Restrictions for the access password
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.LockPayload.epcMemoryBankRestriction">
            <summary>
            Restrictions for the epc memory bank
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.LockPayload.tidMemoryBankRestriction">
            <summary>
            Restrictions for the tid memory bank
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.LockPayload.userMemoryBankRestriction">
            <summary>
            Restrictions for the user memory bank
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.LockPayload.#ctor">
            <summary>
            Initializes a new instance of the LockPayload class with no change restrictions
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.LockPayload.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the LockPayload class with the specified payload
            </summary>
            <param name="payload">The payload for the lock restrictions</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.LockPayload.ToPayload(TechnologySolutions.Rfid.AsciiProtocol.LockPayload)">
            <summary>
            Convert the restriction to a C1G2 compatible payload value
            </summary>
            <param name="payload">The restriction to convert to a payload</param>
            <returns>The lock payload</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.LockPayload.Parse(System.Int32)">
            <summary>
            Parse the restrictions from a C1G2 payload
            </summary>
            <param name="payload">The payload to parse</param>
            <returns>The restriction from the payload</returns>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.LockPayload.KillPasswordRestriction">
            <summary>
            Gets or sets how the kill password (in the reserved memory bank) can be modified
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.LockPayload.AccessPasswordRestriction">
            <summary>
            Gets or sets how the access password (in the reserved memory bank) can be modified
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.LockPayload.EpcMemoryBankRestriction">
            <summary>
            Gets or sets how the EPC memory bank can be modified
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.LockPayload.TidMemoryBankRestriction">
            <summary>
            Gets or sets how the TID memory bank can be modified
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.LockPayload.UserMemoryBankRestriction">
            <summary>
            Gets or sets how the User memory bank can be modified
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.LockPayload.Payload">
            <summary>
            Gets or sets all the restrictions as a Lock Command Payload
            </summary>
            <remarks>
            <para>
            See the EPC Global Class 1 Generation 2 specification for the lock command payload bitmask
            </para>
            <para>
            The set accessor only accepts changing the restriction on a per memory/password basis. 
            i.e. If you adjust a permsission you must change both bits 
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">If the mask bits for a particular section is not set together (i.e. mask bits are not 00 or 11)</exception>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.EnumExtensions">
            <summary>
            Extension methods for the parameter Enums
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.EnumExtensions.log">
            <summary>
            Provides logging for this class
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.EnumExtensions.values">
            <summary>
            Holds a cache of all the values of all the enums where the values have the <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.EnumExtensionAttribute"/>
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.EnumExtensions.ParseParameterAs``1(System.String)">
            <summary>
            Returns the first value of the specified enum type that has a matching parameter
            </summary>
            <typeparam name="TEnum">The type of the enum required</typeparam>
            <param name="parameter">The parameter value to match</param>
            <returns>The first value in the enum that has a matching parameter</returns>
            <exception cref="T:System.FormatException">If parameter is not recognised for that enum</exception>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.EnumExtensions.IsValid(System.Enum)">
            <summary>
            Returns a value indicating whether value is defined in the Enum
            </summary>
            <param name="value">The value to test</param>
            <returns>True if the value is defined in the Enum</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.EnumExtensions.Validate(System.Enum)">
            <summary>
            Throws an ArgumentOutOfRangeException is value is not one of the values of the enum
            </summary>
            <param name="value">The value to test</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If value is not a defined value</exception>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.EnumExtensions.Parameter(System.Enum)">
            <summary>
            Returns the parameter for the specified value
            </summary>
            <param name="value">The value of interest</param>
            <returns>The parameter for the value</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.EnumExtensions.Description(System.Enum)">
            <summary>
            Returns the desctription for the specified value
            </summary>
            <param name="value">The value of interest</param>
            <returns>The description for the value</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.EnumExtensions.ReflectValues">
            <summary>
            Discover all the Enum types in the assembly and build a cache of all Enum values that support the EnumExtensionAttribute
            </summary>
            <returns>The Enum values that support the EnumExtensionAttribute</returns>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.EnumExtensions.Values">
            <summary>
            Gets all the values of all the enums where the values have the <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.EnumExtensionAttribute"/>
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.EnumExtensions.ReflectedEnumValue">
            <summary>
            Private struct to collect extended information about the parameters enumerations
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.EnumExtensions.ReflectedEnumValue.EnumType">
            <summary>
            Gets the Type of the enum value
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.EnumExtensions.ReflectedEnumValue.Value">
            <summary>
            Gets the value of the enum value
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.EnumExtensions.ReflectedEnumValue.Parameter">
            <summary>
            Gets the parameter string of the enum value
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.EnumExtensions.ReflectedEnumValue.Description">
            <summary>
            Gets the description of the enum value
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.EnumExtensions.ReflectedEnumValue.#ctor(System.Type,System.Object,System.String,System.String)">
            <summary>
            Initializes a new instance of the ReflectedEnumValue struct
            </summary>
            <param name="enumType">The type of the Enum</param>
            <param name="value">The value of the enum</param>
            <param name="parameter">The value of this enum as a parameter</param>
            <param name="description">The description of this parameter value</param>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.SwitchState">
            <summary>
            Defines the switch current state
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.SwitchState.Off">
            <summary>
            Switch is off / not pressed
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.SwitchState.Single">
            <summary>
            Switch in on in single press
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.SwitchState.Double">
            <summary>
            Switch is on in double press
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.AuthenticationChipStatus">
            <summary>
            Indicates the status of the Apple Authentication Chip Status
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AuthenticationChipStatus.NotPresent">
            <summary>
            The chip is not installed
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AuthenticationChipStatus.Passed">
            <summary>
            The chip is present and operating (passed)
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AuthenticationChipStatus.Failed">
            <summary>
            The chip is present but not operating (failed)
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchDoublePressCommand">
            <summary>
            A command that activates the double press switch action for the specified number of seconds
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchDoublePressCommand.duration">
            <summary>
            The press duration parameter
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchDoublePressCommand.#ctor">
            <summary>
            Initializes a new instance of the SwitchDoublePressCommand class
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.SwitchDoublePressCommand.PressDuration">
            <summary>
            Gets or sets the duration in seconds the switch remains active
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommander">
            <summary>
            TSLAsciiCommander provides methods to communicate with TSL devices that use the TSL ASCII 2.0 Protocol
            Instances of this class support:
            •connection and disconnection from any TSL Reader connected via a comm port
            •execution of an IAsciiCommand either synchronously or asynchronously
            •management of the responder chain for data received from the TSL device
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommander.log">
            <summary>
            Provides logging for this class
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommander.disposed">
            <summary>
            True when an instance is disposed
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommander.receiveSyncLock">
            <summary>
            Provides synchronization to receive processing
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommander.reader">
            <summary>
            Used to communicate with the reader
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommander.#ctor">
            <summary>
            Initializes a new instance of the AsciiCommander class
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommander.Connect(TechnologySolutions.Rfid.AsciiProtocol.IAsciiSerialPort)">
            <summary>
            Connect the AsciiCommander to the given reader
            </summary>
            <param name="reader">The UHF Reader that supports the TSL ASCII 2.0 protocol</param>
            <returns>True if successfully connected</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommander.Disconnect">
            <summary>
            Disconnects from the current device
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommander.PermanentlyDisconnect">
            <summary>
            Sends the signal to the accessory to permanently disconnect
            </summary>
            <remarks>
            Once issued this will require reconnecting to the reader to use the accessory again. This may require switching to the iOS Settings App
            This is a convenience method and is equivalent to sending a TSLSleepCommand to the reader 
            </remarks>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommander.Send(System.String)">
            <summary>
            Send the given string as a CrLf terminated string, to the reader.
            This method waits until the command has been successfuly sent
            </summary>
            <param name="line">line The ASCII string to send to the device</param>
            <exception cref="T:System.InvalidOperationException">if no device is connected  </exception>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommander.Dispose(System.Boolean)">
            <summary>
            Disposes an instance of the AsciiCommander class
            </summary>
            <param name="disposing">True to dispose managed as well as unmanaged resources</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommander.Reader_Received(System.Object,System.EventArgs)">
            <summary>
            Data was received from the reader. Report all the complete lines to the ASCII commander by calling
            <see cref="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommandExecutorBase.ProcessReceivedLines(System.Collections.Generic.ICollection{System.String})"/>
            </summary>
            <param name="sender">The event source</param>
            <param name="e">Data provided for the event</param>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiCommander.IsConnected">
            <summary>
            Gets a value indicating whether a reader is connected
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.DataBlock">
            <summary>
            Represents a block of binary data (byte array)
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.DataBlock.hex">
            <summary>
            Cache of the hex representation of the data
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.DataBlock.data">
            <summary>
            Cache of the byte array representation of the data
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.DataBlock.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DataBlock class
            </summary>
            <param name="hex">The data represented as a hex string</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.DataBlock.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the DataBlock class
            </summary>
            <param name="data">The data of the datablock</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.DataBlock.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the DataBlock class
            </summary>
            <param name="data">The array to copy the data from</param>
            <param name="offset">The offset into the array to start from</param>
            <param name="length">The number of bytes to copy</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.DataBlock.ToArray">
            <summary>
            Returns the value of the DataBlock as a byte array
            </summary>
            <returns>The value of the DataBlock as a byte array</returns>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.DataBlock.Base16">
            <summary>
            Gets the datablock as a Base16 (hex) string
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.DataBlock.LengthBits">
            <summary>
            Gets the length of the data block in bits
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.DataBlock.LengthBytes">
            <summary>
            Gets the length of the data block in bytes
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.DataBlock.LengthWords">
            <summary>
            Gets the length of the data block in words
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.DataBlock.Base16Encoding">
            <summary>
            Provides methods to convert to and from Base16 encoding
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.DataBlock.Base16Encoding.syncLock">
            <summary>
            Used to synchronise access to HexCharacters
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.DataBlock.Base16Encoding.hexCharacters">
            <summary>
            Cache of accepted hex characters
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.DataBlock.Base16Encoding.Parse(System.String)">
            <summary>
            Parses a Base16 (hex) string and returns the byte array
            </summary>
            <param name="hex">The value to convert</param>
            <returns>The value as a byte array</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.DataBlock.Base16Encoding.ToBase16(System.Byte[])">
            <summary>
            Converts the array to a Base16 (hex) representation
            </summary>
            <param name="data">The data to convert</param>
            <returns>The Base16 equivalent of the data</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.DataBlock.Base16Encoding.ToBase16(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts the array to a Base16 (hex) representation
            </summary>
            <param name="data">The data to convert</param>
            <param name="offset">The offset into the array to convert from</param>
            <param name="length">The number of bytes to convert</param>
            <returns>The Base16 equivalent of the data</returns>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.DataBlock.Base16Encoding.HexCharacters">
            <summary>
            Gets the accepted hex characters
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.Commands.AlertCommand">
            <summary>
            An alert command to send to the reader to sound an alert and/or update the alert settings
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.AlertCommand.alertDuration">
            <summary>
            The alert duration parameter
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.AlertCommand.buzzerTone">
            <summary>
            The buzzer tone parameter
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.AlertCommand.vibrateEnabled">
            <summary>
            The vibrate enabled parameter
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.Commands.AlertCommand.buzzerEnabled">
            <summary>
            The buzzer enabled parameter
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.Commands.AlertCommand.#ctor">
            <summary>
            Initializes a new instance of the AlertCommand class
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.AlertCommand.AlertDuration">
            <summary>
            Gets or sets the alert duration
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.AlertCommand.BuzzerTone">
            <summary>
            Gets or sets the buzzer tone
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.AlertCommand.BuzzerEnabled">
            <summary>
            Gets or sets a value indicating whether buzzer is enabled. 
            Set to null (Nothing is Visual Basic) to not affect the current value
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.Commands.AlertCommand.VibrateEnabled">
            <summary>
            Gets or sets a value indicating whether vibrate is enabled. 
            Set to null (Nothing is Visual Basic) to not affect the current value
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.AsciiLineEventArgs">
            <summary>
            Prodives data for a received line
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiLineEventArgs.#ctor(TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponseLine,System.Boolean)">
            <summary>
            Initializes a new instance of the AsciiLineEventArgs class
            </summary>
            <param name="line">The received line</param>
            <param name="moreToFollow">True if more lines are buffered to follow</param>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiLineEventArgs.Line">
            <summary>
            Gets the line that was received
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiLineEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether this line has been used by a listener
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.AsciiLineEventArgs.MoreToFollow">
            <summary>
            Gets a value indicating whether there are more lines buffered to be signalled
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.IAsciiSerialPort">
            <summary>
            Provides methods and properties to access ASCII data via  serial port
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.IAsciiSerialPort.WriteLine(System.String)">
            <summary>
            Sends the line to the port appending the appropriate line end
            </summary>
            <param name="value">The line to write</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.IAsciiSerialPort.ReadLine">
            <summary>
            Reads a line from the port removing the terminator
            </summary>
            <returns>The line read</returns>
        </member>
        <member name="E:TechnologySolutions.Rfid.AsciiProtocol.IAsciiSerialPort.Received">
            <summary>
            Raised when new data is available to read
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.IAsciiSerialPort.IsDataAvailable">
            <summary>
            Gets a value indicating whether there is more data to read
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.SerialPortWrapper">
            <summary>
            Implements <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.IAsciiSerialPort"/> using the <see cref="T:System.IO.Ports.SerialPort"/> class
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.SerialPortWrapper.disposed">
            <summary>
            True once an instance is disposed
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.SerialPortWrapper.port">
            <summary>
            The port to communicate with the reader
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.SerialPortWrapper.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SerialPortWrapper class
            </summary>
            <param name="portName">The name of the port to connect to</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.SerialPortWrapper.ReadLine">
            <summary>
            Reads a line from the port removing the terminator
            </summary>
            <returns>The line read</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.SerialPortWrapper.WriteLine(System.String)">
            <summary>
            Sends the line to the port appending the appropriate line end
            </summary>
            <param name="value">The line to write</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.SerialPortWrapper.Dispose">
            <summary>
            Disposes an instance of the SerialPowerWrapper class
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.SerialPortWrapper.Dispose(System.Boolean)">
            <summary>
            Disposes an instance of the SerialPortWrapper class
            </summary>
            <param name="disposing">True to dispose managed as well as native resources</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.SerialPortWrapper.OnReceived">
            <summary>
            Raises the <see cref="E:TechnologySolutions.Rfid.AsciiProtocol.SerialPortWrapper.Received"/> event
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.SerialPortWrapper.SerialPort_Received(System.Object,System.IO.Ports.SerialDataReceivedEventArgs)">
            <summary>
            Handles the arrival of data from the serial port by signalling the read thread to read data
            </summary>
            <param name="sender">The event source</param>
            <param name="e">Data provided for the event</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.SerialPortWrapper.SerialPort_ErrorReceived(System.Object,System.IO.Ports.SerialErrorReceivedEventArgs)">
            <summary>
            Handles errors from the serial port
            </summary>
            <param name="sender">The event source</param>
            <param name="e">Data provided for the event</param>
        </member>
        <member name="E:TechnologySolutions.Rfid.AsciiProtocol.SerialPortWrapper.Received">
            <summary>
            Raised when incoming data is available
            </summary>
        </member>
        <member name="P:TechnologySolutions.Rfid.AsciiProtocol.SerialPortWrapper.IsDataAvailable">
            <summary>
            Gets a value indicating whether data is available to read
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.TransponderWriteMode">
            <summary>
            Determines the Class One Generation Two command used by the reader to perform write operations on a transponder
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.TransponderWriteMode.SingleWordWrite">
            <summary>
            Uses the C1G2 Write command to write to a transponder a single word at a time
            </summary>
        </member>
        <member name="F:TechnologySolutions.Rfid.AsciiProtocol.TransponderWriteMode.BlockWrite">
            <summary>
            Uses the C1G2 BlockWrite command to write to a transponder up to two words at a time
            </summary>
        </member>
        <member name="T:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseExtensions">
            <summary>
            Extensions methods for the <see cref="T:TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponseLine"/>
            </summary>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseExtensions.HasHeader(TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponseLine,System.String)">
            <summary>
            Returns a value indicating whether the line has the specified header
            </summary>
            <param name="line">The line to test</param>
            <param name="header">The header to test for (e.g. ME)</param>
            <returns>True if the line has the specified header</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseExtensions.IsCommandStarted(TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponseLine)">
            <summary>
            Returns a value indicating whether the line has an "CS" header
            </summary>
            <param name="line">The line to test</param>
            <returns>True if the line starts with the CS header</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseExtensions.IsError(TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponseLine)">
            <summary>
            Returns a value indicating whether the line has an "ER" header
            </summary>
            <param name="line">The line to test</param>
            <returns>True if the line starts with the ER header</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseExtensions.IsOk(TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponseLine)">
            <summary>
            Returns a value indicating whether the line has an "OK" header
            </summary>
            <param name="line">The line to test</param>
            <returns>True if the line starts with the OK header</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseExtensions.IsParameters(TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponseLine)">
            <summary>
            Returns a value indicating whether the line has an "PR" header
            </summary>
            <param name="line">The line to test</param>
            <returns>True if the line starts with the PR header</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseExtensions.IsMessage(TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponseLine)">
            <summary>
            Returns a value indication whether the line has an "ME" header
            </summary>
            <param name="line">The line to test</param>
            <returns>True if the line starts with the ME header</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseExtensions.ValueByHeader(TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponse,System.String)">
            <summary>
            Returns the value of the first line in the response with the specified header or null if header is not found
            </summary>
            <param name="response">The response to search</param>
            <param name="header">The header to search for</param>
            <returns>The value of the line or null (Nothing in visual basic) if a line with that header is not found</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseExtensions.ValueByHeaderText(TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponse,System.String)">
            <summary>
            Returns the value of the first line in the response with the specified header or string.Empty if header is not found
            </summary>
            <param name="response">The response to search</param>
            <param name="header">The header to search for</param>
            <returns>The value of the line or "" if a line with that header is not found</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseExtensions.ValueByHeaderDateTime(TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponse,System.String)">
            <summary>
            Returns the value of the first line in the response with the specified header parsed as a date and or time
            or DateTime.MinValue if header is not found
            </summary>
            <param name="response">The response to search</param>
            <param name="header">The header to search for</param>
            <returns>The value of the line or DateTime.MinValue if a line with that header is not found</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseExtensions.ValueByHeaderNumber(TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponse,System.String)">
            <summary>
            Returns the value of the first line in the response with the specified header parsed as a number        
            </summary>
            <param name="response">The response to search</param>
            <param name="header">The header to search for</param>
            <returns>The value of the line or DateTime.MinValue if a line with that header is not found</returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseExtensions.ValueByHeader``1(TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponse,System.String)">
            <summary>
            Returns the value of the first line in the response with the specified header parsed as the Enum type specified
            </summary>
            <typeparam name="TEnum">The Enum type expected</typeparam>
            <param name="response">The response to search</param>
            <param name="header">The header to search for</param>
            <returns>The value of the line </returns>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseExtensions.AddHeader(TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponseResponder,System.String)">
            <summary>
            Adds the header specified to the list of AcceptedHeaders
            </summary>
            <param name="response">The response that will accept the header</param>
            <param name="header">The header to add</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseExtensions.AddHeaders(TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponseResponder,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the headers specified to the list of AcceptedHeaders
            </summary>
            <param name="response">The response that will accept the headers</param>
            <param name="headers">The accepted headers</param>
        </member>
        <member name="M:TechnologySolutions.Rfid.AsciiProtocol.AsciiResponseExtensions.AddHeaders(TechnologySolutions.Rfid.AsciiProtocol.IAsciiResponseResponder,System.String)">
            <summary>
            Adds the comma, colon and/or space separated two-character headers to AcceptedHeaders
            </summary>
            <param name="response">The response that will accept the headers</param>
            <param name="headers">The accepted headers</param>
        </member>
    </members>
</doc>
